# Blue-Green Deployment Example - Kubernetes Manifests
# Single AKS Cluster with Namespace-based Blue-Green Strategy

---
# Blue Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: prod-java-backend1-blue
  labels:
    environment: prod
    application: java-backend1
    deployment-slot: blue
    active: "true"
    managed-by: github-actions

---
# Green Namespace  
apiVersion: v1
kind: Namespace
metadata:
  name: prod-java-backend1-green
  labels:
    environment: prod
    application: java-backend1
    deployment-slot: green
    active: "false"
    managed-by: github-actions

---
# Blue Environment - Your Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: java-backend1
  namespace: prod-java-backend1-blue
  labels:
    app: java-backend1
    slot: blue
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: java-backend1
      slot: blue
  template:
    metadata:
      labels:
        app: java-backend1
        slot: blue
        version: v1.0.0
    spec:
      containers:
      - name: java-backend1
        image: yourregistry.azurecr.io/java-backend1:v1.0.0
        ports:
        - containerPort: 8080
        env:
        - name: ENVIRONMENT
          value: "prod"
        - name: DEPLOYMENT_SLOT
          value: "blue"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10

---
# Green Environment - Your Application Deployment (New Version)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: java-backend1
  namespace: prod-java-backend1-green
  labels:
    app: java-backend1
    slot: green
    version: v2.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: java-backend1
      slot: green
  template:
    metadata:
      labels:
        app: java-backend1
        slot: green
        version: v2.0.0
    spec:
      containers:
      - name: java-backend1
        image: yourregistry.azurecr.io/java-backend1:v2.0.0
        ports:
        - containerPort: 8080
        env:
        - name: ENVIRONMENT
          value: "prod"
        - name: DEPLOYMENT_SLOT
          value: "green"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10

---
# Blue Service
apiVersion: v1
kind: Service
metadata:
  name: java-backend1-service
  namespace: prod-java-backend1-blue
  labels:
    app: java-backend1
    slot: blue
spec:
  selector:
    app: java-backend1
    slot: blue
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# Green Service
apiVersion: v1
kind: Service
metadata:
  name: java-backend1-service
  namespace: prod-java-backend1-green
  labels:
    app: java-backend1
    slot: green
spec:
  selector:
    app: java-backend1
    slot: green
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  type: ClusterIP

---
# Main Production Ingress (Blue - Currently Active)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prod-java-backend1-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    # Health check annotations
    nginx.ingress.kubernetes.io/upstream-vhost: $service_name.$namespace.svc.cluster.local
  labels:
    app: java-backend1
    environment: prod
    active-slot: blue
spec:
  tls:
  - hosts:
    - api.yourcompany.com
    secretName: tls-secret
  rules:
  - host: api.yourcompany.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: java-backend1-service
            namespace: prod-java-backend1-blue  # Currently active
            port:
              number: 80

---
# Canary Ingress for Gradual Traffic Shifting (Green - Target)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prod-java-backend1-ingress-canary
  namespace: default
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "0"  # Start with 0%, increase gradually
    nginx.ingress.kubernetes.io/canary-by-header: "X-Canary-Deploy"
    nginx.ingress.kubernetes.io/canary-by-header-value: "green"
  labels:
    app: java-backend1
    environment: prod
    canary-slot: green
spec:
  tls:
  - hosts:
    - api.yourcompany.com
    secretName: tls-secret
  rules:
  - host: api.yourcompany.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: java-backend1-service
            namespace: prod-java-backend1-green  # Target deployment
            port:
              number: 80

---
# Health Check Service for External Monitoring
apiVersion: v1
kind: Service
metadata:
  name: java-backend1-health
  namespace: default
  annotations:
    external-dns.alpha.kubernetes.io/hostname: health.api.yourcompany.com
spec:
  selector:
    app: java-backend1
  ports:
  - name: health
    port: 80
    targetPort: 8080
  type: LoadBalancer

---
# ConfigMap for Blue-Green Deployment Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: blue-green-config
  namespace: default
data:
  current-slot: "blue"
  target-slot: "green"
  deployment-strategy: "blue-green-canary"
  canary-steps: "5,10,25,50,100"
  health-check-duration: "300"
  rollback-threshold: "0.1"  # 0.1% error rate triggers rollback