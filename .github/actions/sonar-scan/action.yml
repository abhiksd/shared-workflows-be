name: 'SonarQube Analysis'
description: 'Run SonarQube analysis with configurable thresholds'

inputs:
  application_name:
    description: 'Application name'
    required: true
  application_type:
    description: 'Application type (java-springboot, nodejs)'
    required: true
  build_context:
    description: 'Build context path'
    required: true
  sonar_token:
    description: 'SonarQube token'
    required: true
  sonar_host_url:
    description: 'SonarQube server URL'
    required: true
  sonar_project_key:
    description: 'SonarQube project key'
    required: false
  sonar_enabled:
    description: 'Enable SonarQube scan'
    required: false
    default: 'true'
  sonar_coverage_threshold:
    description: 'Minimum code coverage percentage'
    required: false
    default: '80'
  sonar_reliability_rating:
    description: 'Maximum reliability rating (A=1, B=2, C=3, D=4, E=5)'
    required: false
    default: '1'
  sonar_security_rating:
    description: 'Maximum security rating (A=1, B=2, C=3, D=4, E=5)'
    required: false
    default: '1'
  sonar_maintainability_rating:
    description: 'Maximum maintainability rating (A=1, B=2, C=3, D=4, E=5)'
    required: false
    default: '2'
  sonar_quality_gate_wait:
    description: 'Wait for quality gate result'
    required: false
    default: 'true'
  sonar_quality_gate_timeout:
    description: 'Quality gate timeout in seconds'
    required: false
    default: '300'
  sonar_exclusions:
    description: 'Files to exclude from analysis'
    required: false
    default: '**/target/**,**/build/**,**/node_modules/**,**/coverage/**,**/dist/**'
  sonar_test_inclusions:
    description: 'Test files to include'
    required: false
    default: '**/*Test.java,**/*test.js,**/*spec.js,**/__tests__/**'

outputs:
  scan_status:
    description: 'Quality gate status'
    value: ${{ steps.results.outputs.status }}
  quality_gate_status:
    description: 'SonarQube quality gate status'
    value: ${{ steps.results.outputs.quality_gate_status }}
  coverage:
    description: 'Code coverage percentage'
    value: ${{ steps.results.outputs.coverage }}
  reliability_rating:
    description: 'Reliability rating'
    value: ${{ steps.results.outputs.reliability_rating }}
  security_rating:
    description: 'Security rating'
    value: ${{ steps.results.outputs.security_rating }}
  maintainability_rating:
    description: 'Maintainability rating'
    value: ${{ steps.results.outputs.maintainability_rating }}

runs:
  using: 'composite'
  steps:
    - name: Setup Java
      if: inputs.sonar_enabled == 'true'
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache SonarQube packages
      if: inputs.sonar_enabled == 'true'
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven packages
      if: inputs.sonar_enabled == 'true'
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run SonarQube Scan
      if: inputs.sonar_enabled == 'true'
      shell: bash
      working-directory: ${{ inputs.build_context }}
      run: |
        PROJECT_KEY="${{ inputs.sonar_project_key || inputs.application_name }}"
        
        mvn clean verify sonar:sonar \
          -Dsonar.projectKey="$PROJECT_KEY" \
          -Dsonar.projectName="${{ inputs.application_name }}" \
          -Dsonar.host.url="${{ inputs.sonar_host_url }}" \
          -Dsonar.token="${{ inputs.sonar_token }}" \
          -Dsonar.exclusions="${{ inputs.sonar_exclusions }}" \
          -Dsonar.test.inclusions="${{ inputs.sonar_test_inclusions }}" \
          -Dsonar.qualitygate.wait=${{ inputs.sonar_quality_gate_wait }} \
          -Dsonar.qualitygate.timeout=${{ inputs.sonar_quality_gate_timeout }}
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Get Results
      id: results
      if: inputs.sonar_enabled == 'true'
      shell: bash
      run: |
        PROJECT_KEY="${{ inputs.sonar_project_key || inputs.application_name }}"
        
        # Get quality gate
        GATE=$(curl -s -u "${{ inputs.sonar_token }}:" \
          "${{ inputs.sonar_host_url }}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}" | \
          jq -r '.projectStatus.status // "OK"')
        
        # Get metrics
        METRICS=$(curl -s -u "${{ inputs.sonar_token }}:" \
          "${{ inputs.sonar_host_url }}/api/measures/component?component=${PROJECT_KEY}&metricKeys=coverage,reliability_rating,security_rating,sqale_rating")
        
        COVERAGE=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0"')
        RELIABILITY=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="reliability_rating") | .value // "1"')
        SECURITY=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="security_rating") | .value // "1"')
        MAINTAINABILITY=$(echo "$METRICS" | jq -r '.component.measures[] | select(.metric=="sqale_rating") | .value // "1"')
        
        # Check thresholds
        STATUS="PASSED"
        [[ "${COVERAGE%.*}" -lt "${{ inputs.sonar_coverage_threshold }}" ]] && STATUS="FAILED"
        [[ "$RELIABILITY" -gt "${{ inputs.sonar_reliability_rating }}" ]] && STATUS="FAILED"
        [[ "$SECURITY" -gt "${{ inputs.sonar_security_rating }}" ]] && STATUS="FAILED"
        [[ "$MAINTAINABILITY" -gt "${{ inputs.sonar_maintainability_rating }}" ]] && STATUS="FAILED"
        [[ "$GATE" == "ERROR" ]] && STATUS="FAILED"
        
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "quality_gate_status=$GATE" >> $GITHUB_OUTPUT
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "reliability_rating=$RELIABILITY" >> $GITHUB_OUTPUT
        echo "security_rating=$SECURITY" >> $GITHUB_OUTPUT
        echo "maintainability_rating=$MAINTAINABILITY" >> $GITHUB_OUTPUT
        echo "üìä SonarQube: $STATUS | Coverage: ${COVERAGE}% | Ratings: R${RELIABILITY}/S${SECURITY}/M${MAINTAINABILITY}"

    - name: Upload Results
      if: always() && inputs.sonar_enabled == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: sonar-scan-results-${{ inputs.application_name }}
        path: |
          ${{ inputs.build_context }}/target/sonar/report-task.txt
          ${{ inputs.build_context }}/target/site/jacoco/
        retention-days: 30

    - name: Skip (Disabled)
      if: inputs.sonar_enabled != 'true'
      shell: bash
      run: echo "‚è≠Ô∏è SonarQube scan disabled"