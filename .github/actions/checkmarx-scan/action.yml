name: 'Checkmarx Scan'
description: 'Checkmarx security scanning with SAST, SCA, and KICS'

inputs:
  application_name:
    description: 'Application name'
    required: true
  application_type:
    description: 'Application type (java-springboot, nodejs)'
    required: true
  build_context:
    description: 'Build context path'
    required: true
  checkmarx_enabled:
    description: 'Enable Checkmarx scanning'
    required: false
    default: 'true'
  checkmarx_url:
    description: 'Checkmarx server URL'
    required: false
  cx_tenant:
    description: 'Checkmarx tenant for OAuth2 authentication'
    required: false
  checkmarx_client_id:
    description: 'Checkmarx OAuth2 client ID'
    required: false
  checkmarx_client_secret:
    description: 'Checkmarx OAuth2 client secret'
    required: false
  checkmarx_scan_types:
    description: 'Checkmarx scan types (comma-separated: sca,sast,kics)'
    required: false
    default: 'sca,sast,kics'
  checkmarx_sast_preset:
    description: 'Checkmarx SAST preset'
    required: false
    default: 'Checkmarx Default'
  checkmarx_sca_resolver:
    description: 'Checkmarx SCA resolver'
    required: false
    default: 'auto'
  checkmarx_kics_platforms:
    description: 'Checkmarx KICS platforms to scan'
    required: false
    default: 'Docker,Kubernetes,Terraform'
  checkmarx_fail_build:
    description: 'Fail build on security issues'
    required: false
    default: 'true'
  checkmarx_high_threshold:
    description: 'High severity threshold'
    required: false
    default: '0'
  checkmarx_medium_threshold:
    description: 'Medium severity threshold'
    required: false
    default: '5'
  checkmarx_low_threshold:
    description: 'Low severity threshold'
    required: false
    default: '10'

outputs:
  scan_id:
    description: 'Checkmarx scan ID'
    value: ${{ steps.setup.outputs.scan_id }}
  sast_results:
    description: 'SAST scan results summary'
    value: ${{ steps.sast-scan.outputs.results }}
  sca_results:
    description: 'SCA scan results summary'
    value: ${{ steps.sca-scan.outputs.results }}
  kics_results:
    description: 'KICS scan results summary'
    value: ${{ steps.kics-scan.outputs.results }}
  overall_results:
    description: 'Combined scan results summary'
    value: ${{ steps.evaluate-results.outputs.overall_results }}
  scan_status:
    description: 'Overall Checkmarx scan status'
    value: ${{ steps.evaluate-results.outputs.scan_status }}

runs:
  using: 'composite'
  steps:
    - name: Validate Configuration and Setup
      id: setup
      shell: bash
      run: |
        # Load Checkmarx utilities
        source ${{ github.workspace }}/scripts/checkmarx-utils.sh
        
        # Validate configuration
        if ! cx_validate_config "${{ inputs.checkmarx_enabled }}" "${{ inputs.checkmarx_url }}" "${{ inputs.cx_tenant }}" "${{ inputs.checkmarx_client_id }}" "${{ inputs.checkmarx_client_secret }}"; then
          echo "scan_id=disabled" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Generate scan ID
        SCAN_ID="CX-$(date +%Y%m%d%H%M%S)-${{ inputs.application_name }}"
        echo "scan_id=$SCAN_ID" >> $GITHUB_OUTPUT
        log_info "Generated Scan ID: $SCAN_ID"
        
        # Setup tools
        cx_setup_tools "${{ inputs.checkmarx_scan_types }}"

    - name: SAST Scan
      id: sast-scan
      if: steps.setup.outputs.scan_id != 'disabled' && contains(inputs.checkmarx_scan_types, 'sast')
      shell: bash
      run: |
        source ${{ github.workspace }}/scripts/checkmarx-utils.sh
        
        # Authenticate and run SAST scan
        ACCESS_TOKEN=$(cx_authenticate "${{ inputs.checkmarx_url }}" "${{ inputs.checkmarx_client_id }}" "${{ inputs.checkmarx_client_secret }}")
        cx_run_sast "${{ inputs.checkmarx_url }}" "$ACCESS_TOKEN" "${{ inputs.application_name }}-SAST-${{ steps.setup.outputs.scan_id }}" "${{ inputs.checkmarx_sast_preset }}" "${{ inputs.build_context }}"
        
        # Parse results
        SAST_COUNTS=$(cx_parse_results "sast" "sast-results.xml")
        read -r HIGH_SAST MEDIUM_SAST LOW_SAST <<< "$SAST_COUNTS"
        
        SAST_SUMMARY="H${HIGH_SAST}/M${MEDIUM_SAST}/L${LOW_SAST}"
        [[ ! -f "sast-results.xml" ]] && SAST_SUMMARY="N/A"
        
        # Store results
        echo "HIGH_SAST=$HIGH_SAST" >> $GITHUB_ENV
        echo "MEDIUM_SAST=$MEDIUM_SAST" >> $GITHUB_ENV
        echo "LOW_SAST=$LOW_SAST" >> $GITHUB_ENV
        echo "results=$SAST_SUMMARY" >> $GITHUB_OUTPUT

    - name: SCA Scan
      id: sca-scan
      if: steps.setup.outputs.scan_id != 'disabled' && contains(inputs.checkmarx_scan_types, 'sca')
      shell: bash
      run: |
        source ${{ github.workspace }}/scripts/checkmarx-utils.sh
        
        # Run SCA scan
        cx_run_sca "${{ inputs.application_name }}-SCA-${{ steps.setup.outputs.scan_id }}" "${{ inputs.build_context }}" "${{ inputs.checkmarx_sca_resolver }}"
        
        # Parse results
        SCA_COUNTS=$(cx_parse_results "sca" "sca-results.json")
        read -r HIGH_SCA MEDIUM_SCA LOW_SCA <<< "$SCA_COUNTS"
        
        SCA_SUMMARY="H${HIGH_SCA}/M${MEDIUM_SCA}/L${LOW_SCA}"
        [[ ! -f "sca-results.json" ]] && SCA_SUMMARY="N/A"
        
        # Store results
        echo "HIGH_SCA=$HIGH_SCA" >> $GITHUB_ENV
        echo "MEDIUM_SCA=$MEDIUM_SCA" >> $GITHUB_ENV
        echo "LOW_SCA=$LOW_SCA" >> $GITHUB_ENV
        echo "results=$SCA_SUMMARY" >> $GITHUB_OUTPUT

    - name: KICS Scan
      id: kics-scan
      if: steps.setup.outputs.scan_id != 'disabled' && contains(inputs.checkmarx_scan_types, 'kics')
      shell: bash
      run: |
        source ${{ github.workspace }}/scripts/checkmarx-utils.sh
        
        # Run KICS scan
        cx_run_kics "${{ inputs.build_context }}" "${{ inputs.checkmarx_kics_platforms }}"
        
        # Parse results
        KICS_COUNTS=$(cx_parse_results "kics" "kics-results/results.json")
        read -r HIGH_KICS MEDIUM_KICS LOW_KICS <<< "$KICS_COUNTS"
        
        KICS_SUMMARY="H${HIGH_KICS}/M${MEDIUM_KICS}/L${LOW_KICS}"
        [[ ! -f "kics-results/results.json" ]] && KICS_SUMMARY="N/A"
        
        # Store results
        echo "HIGH_KICS=$HIGH_KICS" >> $GITHUB_ENV
        echo "MEDIUM_KICS=$MEDIUM_KICS" >> $GITHUB_ENV
        echo "LOW_KICS=$LOW_KICS" >> $GITHUB_ENV
        echo "results=$KICS_SUMMARY" >> $GITHUB_OUTPUT

    - name: Evaluate Results and Generate Report
      id: evaluate-results
      if: steps.setup.outputs.scan_id != 'disabled'
      shell: bash
      run: |
        source ${{ github.workspace }}/scripts/checkmarx-utils.sh
        
        # Combine results
        COMBINED_RESULTS=""
        [[ "${{ steps.sast-scan.outputs.results }}" != "" && "${{ steps.sast-scan.outputs.results }}" != "N/A" ]] && COMBINED_RESULTS="${COMBINED_RESULTS}SAST:${{ steps.sast-scan.outputs.results }} "
        [[ "${{ steps.sca-scan.outputs.results }}" != "" && "${{ steps.sca-scan.outputs.results }}" != "N/A" ]] && COMBINED_RESULTS="${COMBINED_RESULTS}SCA:${{ steps.sca-scan.outputs.results }} "
        [[ "${{ steps.kics-scan.outputs.results }}" != "" && "${{ steps.kics-scan.outputs.results }}" != "N/A" ]] && COMBINED_RESULTS="${COMBINED_RESULTS}KICS:${{ steps.kics-scan.outputs.results }} "
        COMBINED_RESULTS=$(echo "$COMBINED_RESULTS" | xargs)
        [[ -z "$COMBINED_RESULTS" ]] && COMBINED_RESULTS="No scans completed"
        
        # Calculate totals and evaluate thresholds
        TOTAL_HIGH=$((${HIGH_SAST:-0} + ${HIGH_SCA:-0} + ${HIGH_KICS:-0}))
        TOTAL_MEDIUM=$((${MEDIUM_SAST:-0} + ${MEDIUM_SCA:-0} + ${MEDIUM_KICS:-0}))
        TOTAL_LOW=$((${LOW_SAST:-0} + ${LOW_SCA:-0} + ${LOW_KICS:-0}))
        
        OVERALL_STATUS=$(cx_evaluate_thresholds "$TOTAL_HIGH" "$TOTAL_MEDIUM" "$TOTAL_LOW" "${{ inputs.checkmarx_high_threshold }}" "${{ inputs.checkmarx_medium_threshold }}" "${{ inputs.checkmarx_low_threshold }}" "${{ inputs.checkmarx_fail_build }}")
        
        # Generate report
        cx_generate_report "${{ inputs.application_name }}" "${{ steps.setup.outputs.scan_id }}" "${{ inputs.checkmarx_scan_types }}" "${{ inputs.checkmarx_sast_preset }}" "${{ inputs.checkmarx_sca_resolver }}" "${{ inputs.checkmarx_kics_platforms }}" "${{ steps.sast-scan.outputs.results }}" "${{ steps.sca-scan.outputs.results }}" "${{ steps.kics-scan.outputs.results }}" "${{ inputs.checkmarx_high_threshold }}" "${{ inputs.checkmarx_medium_threshold }}" "${{ inputs.checkmarx_low_threshold }}" "$OVERALL_STATUS"
        
        # Set outputs
        cx_set_outputs "${{ steps.setup.outputs.scan_id }}" "${{ steps.sast-scan.outputs.results }}" "${{ steps.sca-scan.outputs.results }}" "${{ steps.kics-scan.outputs.results }}" "$COMBINED_RESULTS" "$OVERALL_STATUS"

    - name: Upload Artifacts and Final Check
      if: always() && steps.setup.outputs.scan_id != 'disabled'
      uses: actions/upload-artifact@v4
      with:
        name: checkmarx-scan-results-${{ inputs.application_name }}
        path: |
          checkmarx-scan-report.md
          sast-results.*
          sca-results.*
          kics-results/
        retention-days: 30

    - name: Final Status Check
      if: steps.setup.outputs.scan_id != 'disabled'
      shell: bash
      run: |
        source ${{ github.workspace }}/scripts/checkmarx-utils.sh
        STATUS="${{ steps.evaluate-results.outputs.scan_status }}"
        if [[ "$STATUS" == "FAILED" ]]; then
          log_error "Checkmarx scan failed - check the report for details"
          exit 1
        else
          log_success "Checkmarx scan completed successfully"
        fi