name: 'Checkmarx Security Scan'
description: 'Run Checkmarx AST security scan with vulnerability thresholds'

inputs:
  application_name:
    description: 'Application name'
    required: true
  application_type:
    description: 'Application type (java-springboot, nodejs)'
    required: true
  build_context:
    description: 'Build context path'
    required: true
  checkmarx_url:
    description: 'Checkmarx server URL'
    required: true
  checkmarx_client_id:
    description: 'Checkmarx username'
    required: true
  checkmarx_client_secret:
    description: 'Checkmarx password'
    required: true
  cx_tenant:
    description: 'Checkmarx tenant'
    required: true
  checkmarx_enabled:
    description: 'Enable Checkmarx scan'
    required: false
    default: 'true'
  checkmarx_scan_types:
    description: 'Comma-separated scan types'
    required: false
    default: 'sast,sca,kics'
  checkmarx_sast_preset:
    description: 'SAST scan preset'
    required: false
    default: 'Checkmarx Default'
  checkmarx_high_threshold:
    description: 'Maximum high vulnerabilities'
    required: false
    default: '0'
  checkmarx_medium_threshold:
    description: 'Maximum medium vulnerabilities'
    required: false
    default: '5'
  checkmarx_low_threshold:
    description: 'Maximum low vulnerabilities'
    required: false
    default: '10'
  checkmarx_sca_resolver:
    description: 'Checkmarx SCA resolver'
    required: false
    default: 'auto'
  checkmarx_kics_platforms:
    description: 'Checkmarx KICS platforms to scan'
    required: false
    default: 'Docker,Kubernetes,Terraform'
  checkmarx_fail_build:
    description: 'Fail build on security issues'
    required: false
    default: 'true'

outputs:
  scan_status:
    description: 'Scan status'
    value: ${{ steps.results.outputs.status }}
  scan_id:
    description: 'Checkmarx scan ID'
    value: ${{ steps.results.outputs.scan_id }}
  sast_results:
    description: 'SAST scan results summary'
    value: ${{ steps.results.outputs.sast_results }}
  sca_results:
    description: 'SCA scan results summary'
    value: ${{ steps.results.outputs.sca_results }}
  kics_results:
    description: 'KICS scan results summary'
    value: ${{ steps.results.outputs.kics_results }}
  overall_results:
    description: 'Combined scan results summary'
    value: ${{ steps.results.outputs.overall_results }}
  critical_count:
    description: 'Critical vulnerabilities count'
    value: ${{ steps.results.outputs.critical-count }}
  high_count:
    description: 'High vulnerabilities count'
    value: ${{ steps.results.outputs.high-count }}

runs:
  using: 'composite'
  steps:
    - name: Setup SCA Resolver (Java)
      if: inputs.checkmarx_enabled == 'true' && contains(inputs.checkmarx_scan_types, 'sca')
      shell: bash
      run: |
        if [[ -f "pom.xml" || -f "build.gradle" ]]; then
          echo "üì¶ Setup SCA for Java..."
          wget -q https://sca-downloads.s3.amazonaws.com/cli/2.7.2/ScaResolver-linux64.tar.gz
          tar -xzf ScaResolver-linux64.tar.gz && rm ScaResolver-linux64.tar.gz
          ./ScaResolver offline -r ".cxsca-results.json" -s . -n "${{ github.repository }}"
        fi

    - name: Run Checkmarx AST
      if: inputs.checkmarx_enabled == 'true'
      uses: checkmarx/ast-github-action@86e9ae570a811f9a1fb85903647a307aa3bf6253
      with:
        project_name: ${{ github.repository }}
        cx_server: ${{ inputs.checkmarx_url }}
        cx_user: ${{ inputs.checkmarx_client_id }}
        cx_password: ${{ inputs.checkmarx_client_secret }}
        cx_tenant: ${{ inputs.cx_tenant }}
        cx_client_secret: ${{ inputs.checkmarx_client_secret }}
        additional_params: --scan-types ${{ inputs.checkmarx_scan_types }} --report-format sarif --output-path . --sast-preset-name "${{ inputs.checkmarx_sast_preset }}"

    - name: Get Results
      id: results
      if: inputs.checkmarx_enabled == 'true'
      shell: bash
      run: |
        SCAN_ID="CX-$(date +%Y%m%d%H%M%S)-${{ inputs.application_name }}"
        CRITICAL=0
        HIGH=0
        MEDIUM=0
        LOW=0
        
        # Parse SARIF results
        for file in $(find . -name "*.sarif" 2>/dev/null | head -3); do
          if [[ -f "$file" ]] && command -v jq >/dev/null 2>&1; then
            CRITICAL=$((CRITICAL + $(jq -r '[.runs[]?.results[]? | select(.level=="error")] | length' "$file" 2>/dev/null || echo "0")))
            HIGH=$((HIGH + $(jq -r '[.runs[]?.results[]? | select(.level=="warning")] | length' "$file" 2>/dev/null || echo "0")))
            MEDIUM=$((MEDIUM + $(jq -r '[.runs[]?.results[]? | select(.level=="note")] | length' "$file" 2>/dev/null || echo "0")))
            LOW=$((LOW + $(jq -r '[.runs[]?.results[]? | select(.level=="info")] | length' "$file" 2>/dev/null || echo "0")))
          fi
        done
        
        # Check thresholds
        STATUS="PASSED"
        [[ "$HIGH" -gt "${{ inputs.checkmarx_high_threshold }}" ]] && STATUS="FAILED"
        [[ "$MEDIUM" -gt "${{ inputs.checkmarx_medium_threshold }}" ]] && STATUS="FAILED"
        [[ "$LOW" -gt "${{ inputs.checkmarx_low_threshold }}" ]] && STATUS="FAILED"
        
        # Generate results summary
        SAST_RESULTS="H${HIGH}/M${MEDIUM}/L${LOW}"
        SCA_RESULTS="H${HIGH}/M${MEDIUM}/L${LOW}"
        KICS_RESULTS="H${HIGH}/M${MEDIUM}/L${LOW}"
        OVERALL_RESULTS="Total: H${HIGH}/M${MEDIUM}/L${LOW}"
        
        # Set outputs
        echo "scan_id=$SCAN_ID" >> $GITHUB_OUTPUT
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "sast_results=$SAST_RESULTS" >> $GITHUB_OUTPUT
        echo "sca_results=$SCA_RESULTS" >> $GITHUB_OUTPUT
        echo "kics_results=$KICS_RESULTS" >> $GITHUB_OUTPUT
        echo "overall_results=$OVERALL_RESULTS" >> $GITHUB_OUTPUT
        echo "critical-count=$CRITICAL" >> $GITHUB_OUTPUT
        echo "high-count=$HIGH" >> $GITHUB_OUTPUT
        echo "üîí Checkmarx: $STATUS | Vulnerabilities: $CRITICAL critical, $HIGH high"

    - name: Upload Results
      if: always() && inputs.checkmarx_enabled == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: checkmarx-scan-results-${{ inputs.application_name }}
        path: |
          *.sarif
          .cxsca-results.json
        retention-days: 30

    - name: Check Build Status
      if: inputs.checkmarx_enabled == 'true' && inputs.checkmarx_fail_build == 'true'
      shell: bash
      run: |
        STATUS="${{ steps.results.outputs.status }}"
        if [[ "$STATUS" == "FAILED" ]]; then
          echo "‚ùå Checkmarx scan failed - vulnerabilities exceed thresholds"
          exit 1
        else
          echo "‚úÖ Checkmarx scan passed"
        fi

    - name: Skip (Disabled)
      if: inputs.checkmarx_enabled != 'true'
      shell: bash
      run: echo "‚è≠Ô∏è Checkmarx scan disabled"