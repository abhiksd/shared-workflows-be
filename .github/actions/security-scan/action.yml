name: 'Security Scan'
description: 'Comprehensive security scanning with SonarQube and Checkmarx'

inputs:
  application_name:
    description: 'Application name'
    required: true
  application_type:
    description: 'Application type (java-springboot, nodejs)'
    required: true
  build_context:
    description: 'Build context path'
    required: true
  # SonarQube Configuration
  sonar_enabled:
    description: 'Enable SonarQube scanning'
    required: false
    default: 'true'
  sonar_host_url:
    description: 'SonarQube server URL'
    required: false
  sonar_token:
    description: 'SonarQube authentication token'
    required: false
  sonar_project_key:
    description: 'SonarQube project key'
    required: false
  sonar_quality_gate_wait:
    description: 'Wait for quality gate result'
    required: false
    default: 'true'
  sonar_quality_gate_timeout:
    description: 'Quality gate timeout in seconds'
    required: false
    default: '300'
  sonar_coverage_threshold:
    description: 'Minimum code coverage percentage'
    required: false
    default: '80'
  sonar_reliability_rating:
    description: 'Maximum reliability rating (A=1, B=2, C=3, D=4, E=5)'
    required: false
    default: '1'
  sonar_security_rating:
    description: 'Maximum security rating (A=1, B=2, C=3, D=4, E=5)'
    required: false
    default: '1'
  sonar_maintainability_rating:
    description: 'Maximum maintainability rating (A=1, B=2, C=3, D=4, E=5)'
    required: false
    default: '2'
  # Checkmarx Configuration
  checkmarx_enabled:
    description: 'Enable Checkmarx scanning'
    required: false
    default: 'true'
  checkmarx_url:
    description: 'Checkmarx server URL'
    required: false
  checkmarx_username:
    description: 'Checkmarx username'
    required: false
  checkmarx_password:
    description: 'Checkmarx password'
    required: false
  checkmarx_client_secret:
    description: 'Checkmarx client secret'
    required: false
  checkmarx_tenant:
    description: 'Checkmarx tenant'
    required: false
  checkmarx_scan_types:
    description: 'Checkmarx scan types (comma-separated: sca,sast,kics)'
    required: false
    default: 'sca,sast,kics'
  checkmarx_sast_preset:
    description: 'Checkmarx SAST preset'
    required: false
    default: 'Checkmarx Default'
  checkmarx_sca_resolver:
    description: 'Checkmarx SCA resolver'
    required: false
    default: 'auto'
  checkmarx_kics_platforms:
    description: 'Checkmarx KICS platforms to scan'
    required: false
    default: 'Docker,Kubernetes,Terraform'
  checkmarx_fail_build:
    description: 'Fail build on security issues'
    required: false
    default: 'true'
  checkmarx_high_threshold:
    description: 'High severity threshold'
    required: false
    default: '0'
  checkmarx_medium_threshold:
    description: 'Medium severity threshold'
    required: false
    default: '5'
  checkmarx_low_threshold:
    description: 'Low severity threshold'
    required: false
    default: '10'
  # Additional Security Tools
  dependency_check_enabled:
    description: 'Enable OWASP Dependency Check'
    required: false
    default: 'true'
  secret_scan_enabled:
    description: 'Enable secret scanning'
    required: false
    default: 'true'

outputs:
  sonar_quality_gate_status:
    description: 'SonarQube quality gate status'
    value: ${{ steps.sonar-scan.outputs.quality_gate_status }}
  sonar_coverage:
    description: 'Code coverage percentage'
    value: ${{ steps.sonar-scan.outputs.coverage }}
  sonar_scan_status:
    description: 'SonarQube scan status'
    value: ${{ steps.sonar-scan.outputs.scan_status }}
  checkmarx_scan_id:
    description: 'Checkmarx scan ID'
    value: ${{ steps.checkmarx-scan.outputs.scan_id }}
  checkmarx_results:
    description: 'Checkmarx scan results summary'
    value: ${{ steps.checkmarx-scan.outputs.overall_results }}
  checkmarx_scan_status:
    description: 'Checkmarx scan status'
    value: ${{ steps.checkmarx-scan.outputs.scan_status }}
  security_status:
    description: 'Overall security scan status'
    value: ${{ steps.security-summary.outputs.status }}

runs:
  using: 'composite'
  steps:
    - name: Setup Security Scanning
      shell: bash
      run: |
        echo "🔒 Setting up security scanning for ${{ inputs.application_name }}"
        echo "Application Type: ${{ inputs.application_type }}"
        echo "SonarQube Enabled: ${{ inputs.sonar_enabled }}"
        echo "Checkmarx Enabled: ${{ inputs.checkmarx_enabled }}"
        echo "Checkmarx Scan Types: ${{ inputs.checkmarx_scan_types }}"

    # SonarQube Analysis
    - name: SonarQube Scan
      id: sonar-scan
      if: inputs.sonar_enabled == 'true'
      uses: ./.github/actions/sonar-scan
      with:
        application_name: ${{ inputs.application_name }}
        application_type: ${{ inputs.application_type }}
        build_context: ${{ inputs.build_context }}
        sonar_enabled: ${{ inputs.sonar_enabled }}
        sonar_host_url: ${{ inputs.sonar_host_url }}
        sonar_token: ${{ inputs.sonar_token }}
        sonar_project_key: ${{ inputs.sonar_project_key }}
        sonar_quality_gate_wait: ${{ inputs.sonar_quality_gate_wait }}
        sonar_quality_gate_timeout: ${{ inputs.sonar_quality_gate_timeout }}
        sonar_coverage_threshold: ${{ inputs.sonar_coverage_threshold }}
        sonar_reliability_rating: ${{ inputs.sonar_reliability_rating }}
        sonar_security_rating: ${{ inputs.sonar_security_rating }}
        sonar_maintainability_rating: ${{ inputs.sonar_maintainability_rating }}

    # Checkmarx Security Scanning
    - name: Checkmarx Scan
      id: checkmarx-scan
      if: inputs.checkmarx_enabled == 'true'
      uses: ./.github/actions/checkmarx-scan
      with:
        application_name: ${{ inputs.application_name }}
        application_type: ${{ inputs.application_type }}
        build_context: ${{ inputs.build_context }}
        checkmarx_enabled: ${{ inputs.checkmarx_enabled }}
        checkmarx_url: ${{ inputs.checkmarx_url }}
        checkmarx_username: ${{ inputs.checkmarx_username }}
        checkmarx_password: ${{ inputs.checkmarx_password }}
        checkmarx_client_secret: ${{ inputs.checkmarx_client_secret }}
        checkmarx_tenant: ${{ inputs.checkmarx_tenant }}
        checkmarx_scan_types: ${{ inputs.checkmarx_scan_types }}
        checkmarx_sast_preset: ${{ inputs.checkmarx_sast_preset }}
        checkmarx_sca_resolver: ${{ inputs.checkmarx_sca_resolver }}
        checkmarx_kics_platforms: ${{ inputs.checkmarx_kics_platforms }}
        checkmarx_fail_build: ${{ inputs.checkmarx_fail_build }}
        checkmarx_high_threshold: ${{ inputs.checkmarx_high_threshold }}
        checkmarx_medium_threshold: ${{ inputs.checkmarx_medium_threshold }}
        checkmarx_low_threshold: ${{ inputs.checkmarx_low_threshold }}

    # OWASP Dependency Check
    - name: OWASP Dependency Check
      if: inputs.dependency_check_enabled == 'true'
      shell: bash
      run: |
        echo "🔍 Running OWASP Dependency Check..."
        
        # Install OWASP Dependency Check
        curl -L -o dependency-check.zip "https://github.com/jeremylong/DependencyCheck/releases/latest/download/dependency-check-9.0.7-release.zip"
        unzip -q dependency-check.zip
        chmod +x dependency-check/bin/dependency-check.sh
        
        # Run dependency check
        ./dependency-check/bin/dependency-check.sh \
          --project "${{ inputs.application_name }}" \
          --scan ${{ inputs.build_context }} \
          --format JSON \
          --format HTML \
          --out dependency-check-report \
          --failOnCVSS 7
        
        echo "✅ OWASP Dependency Check completed"

    # Secret Scanning
    - name: Secret Scanning
      if: inputs.secret_scan_enabled == 'true'
      shell: bash
      run: |
        echo "🔐 Running secret scanning..."
        
        # Install TruffleHog for secret detection
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
        
        # Run secret scan
        trufflehog filesystem ${{ inputs.build_context }} \
          --json \
          --no-update \
          --fail \
          > secret-scan-results.json || true
        
        # Check for secrets
        if [ -f "secret-scan-results.json" ] && [ -s "secret-scan-results.json" ]; then
          SECRET_COUNT=$(wc -l < secret-scan-results.json)
          if [[ $SECRET_COUNT -gt 0 ]]; then
            echo "❌ Found $SECRET_COUNT potential secrets in code"
            cat secret-scan-results.json
            exit 1
          fi
        fi
        
        echo "✅ No secrets detected"

    # Security Summary
    - name: Security Summary
      id: security-summary
      shell: bash
      run: |
        echo "📋 Generating security scan summary..."
        
        OVERALL_STATUS="PASSED"
        FAILURES=()
        
        # Check SonarQube status
        SONAR_STATUS="${{ steps.sonar-scan.outputs.scan_status || 'SKIPPED' }}"
        if [[ "${{ inputs.sonar_enabled }}" == "true" && "$SONAR_STATUS" == "FAILED" ]]; then
          OVERALL_STATUS="FAILED"
          FAILURES+=("SonarQube analysis failed")
        fi
        
        # Check Checkmarx status
        CHECKMARX_STATUS="${{ steps.checkmarx-scan.outputs.scan_status || 'SKIPPED' }}"
        if [[ "${{ inputs.checkmarx_enabled }}" == "true" && "$CHECKMARX_STATUS" == "FAILED" ]]; then
          OVERALL_STATUS="FAILED"
          FAILURES+=("Checkmarx security scans failed")
        fi
        
        # Create summary report
        cat > security-summary.md << EOF
        # 🔒 Security Scan Summary
        
        ## Application: ${{ inputs.application_name }}
        ## Scan Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ### SonarQube Analysis
        EOF
        
        if [[ "${{ inputs.sonar_enabled }}" == "true" ]]; then
          cat >> security-summary.md << EOF
        - **Status**: ${{ steps.sonar-scan.outputs.scan_status || 'N/A' }} (${{ steps.sonar-scan.outputs.quality_gate_status || 'N/A' }})
        - **Coverage**: ${{ steps.sonar-scan.outputs.coverage || 'N/A' }}%
        - **Coverage Threshold**: ${{ inputs.sonar_coverage_threshold }}%
        - **Reliability Rating**: ${{ steps.sonar-scan.outputs.reliability_rating || 'N/A' }}
        - **Security Rating**: ${{ steps.sonar-scan.outputs.security_rating || 'N/A' }}
        - **Maintainability Rating**: ${{ steps.sonar-scan.outputs.maintainability_rating || 'N/A' }}
        EOF
        else
          echo "- **Status**: Disabled" >> security-summary.md
        fi
        
        cat >> security-summary.md << EOF
        
        ### Checkmarx Security Scan
        EOF
        
        if [[ "${{ inputs.checkmarx_enabled }}" == "true" ]]; then
          cat >> security-summary.md << EOF
        - **Status**: ${{ steps.checkmarx-scan.outputs.scan_status || 'N/A' }}
        - **Scan ID**: ${{ steps.checkmarx-scan.outputs.scan_id || 'N/A' }}
        - **Scan Types**: ${{ inputs.checkmarx_scan_types }}
        - **Results**: ${{ steps.checkmarx-scan.outputs.overall_results || 'N/A' }}
        - **Thresholds**: High≤${{ inputs.checkmarx_high_threshold }}, Medium≤${{ inputs.checkmarx_medium_threshold }}, Low≤${{ inputs.checkmarx_low_threshold }}
        EOF
        else
          echo "- **Status**: Disabled" >> security-summary.md
        fi
        
        cat >> security-summary.md << EOF
        
        ### Additional Security Checks
        - **OWASP Dependency Check**: ${{ inputs.dependency_check_enabled == 'true' && '✅ Enabled' || '❌ Disabled' }}
        - **Secret Scanning**: ${{ inputs.secret_scan_enabled == 'true' && '✅ Enabled' || '❌ Disabled' }}
        
        ### Overall Status: ${OVERALL_STATUS}
        EOF
        
        if [[ "$OVERALL_STATUS" == "FAILED" ]]; then
          cat >> security-summary.md << EOF
        
        ### ❌ Failures:
        EOF
          for failure in "${FAILURES[@]}"; do
            echo "- $failure" >> security-summary.md
          done
        fi
        
        echo "status=${OVERALL_STATUS}" >> $GITHUB_OUTPUT
        
        echo "✅ Security scan summary generated"
        cat security-summary.md
        
        # Upload artifacts
        echo "📤 Uploading security scan artifacts..."

    # Upload Security Artifacts
    - name: Upload Security Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results-${{ inputs.application_name }}
        path: |
          security-summary.md
          sast-results.*
          sca-results.*
          kics-results/
          dependency-check-report/
          secret-scan-results.json
        retention-days: 30