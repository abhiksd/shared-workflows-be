name: 'Helm Deploy'
description: 'Composite action to deploy applications using Helm'
inputs:
  application_name:
    description: 'Application name'
    required: true
  environment:
    description: 'Target environment (dev, staging, production)'
    required: true
  helm_chart_path:
    description: 'Path to Helm chart'
    required: true
  image_tag:
    description: 'Docker image tag to deploy'
    required: true
  namespace:
    description: 'Kubernetes namespace'
    required: false
  aks_cluster_name:
    description: 'AKS cluster name'
    required: true
  aks_resource_group:
    description: 'AKS resource group'
    required: true
  helm_timeout:
    description: 'Helm deployment timeout'
    required: false
    default: '10m'
  helm_values_file:
    description: 'Additional Helm values file'
    required: false
  dry_run:
    description: 'Perform a dry run'
    required: false
    default: 'false'

outputs:
  deployment_status:
    description: 'Deployment status'
    value: ${{ steps.deploy.outputs.deployment_status }}
  release_name:
    description: 'Helm release name'
    value: ${{ steps.deploy.outputs.release_name }}

runs:
  using: 'composite'
  steps:
    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Get AKS credentials
      shell: bash
      run: |
        echo "🔑 Getting AKS credentials..."
        az aks get-credentials \
          --resource-group ${{ inputs.aks_resource_group }} \
          --name ${{ inputs.aks_cluster_name }} \
          --overwrite-existing
        
        echo "✅ AKS credentials configured"
        kubectl cluster-info

    - name: Validate Helm chart
      shell: bash
      run: |
        echo "🔍 Validating Helm chart..."
        
        if [ ! -d "${{ inputs.helm_chart_path }}" ]; then
          echo "❌ Helm chart directory not found: ${{ inputs.helm_chart_path }}"
          exit 1
        fi
        
        if [ ! -f "${{ inputs.helm_chart_path }}/Chart.yaml" ]; then
          echo "❌ Chart.yaml not found in: ${{ inputs.helm_chart_path }}"
          exit 1
        fi
        
        # Validate chart
        helm lint ${{ inputs.helm_chart_path }}
        echo "✅ Helm chart validation passed"

    - name: Prepare deployment
      id: prepare
      shell: bash
      run: |
        APPLICATION_NAME=${{ inputs.application_name }}
        ENVIRONMENT=${{ inputs.environment }}
        NAMESPACE=${NAMESPACE:-$ENVIRONMENT}
        
        # Generate release name
        RELEASE_NAME="${APPLICATION_NAME}-${ENVIRONMENT}"
        
        # Set namespace
        if [ -z "${{ inputs.namespace }}" ]; then
          NAMESPACE=$ENVIRONMENT
        else
          NAMESPACE=${{ inputs.namespace }}
        fi
        
        echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
        echo "namespace=${NAMESPACE}" >> $GITHUB_OUTPUT
        
        echo "📋 Deployment preparation:"
        echo "  Application: ${APPLICATION_NAME}"
        echo "  Environment: ${ENVIRONMENT}"
        echo "  Release name: ${RELEASE_NAME}"
        echo "  Namespace: ${NAMESPACE}"
        echo "  Image tag: ${{ inputs.image_tag }}"

    - name: Create namespace
      shell: bash
      run: |
        NAMESPACE=${{ steps.prepare.outputs.namespace }}
        
        echo "🏗️ Ensuring namespace exists: ${NAMESPACE}"
        kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
        
        echo "✅ Namespace ready: ${NAMESPACE}"

    - name: Deploy with Helm
      id: deploy
      shell: bash
      run: |
        APPLICATION_NAME=${{ inputs.application_name }}
        ENVIRONMENT=${{ inputs.environment }}
        RELEASE_NAME=${{ steps.prepare.outputs.release_name }}
        NAMESPACE=${{ steps.prepare.outputs.namespace }}
        
        echo "🚀 Starting Helm deployment..."
        
        # Build Helm command
        HELM_CMD="helm upgrade --install ${RELEASE_NAME} ${{ inputs.helm_chart_path }}"
        HELM_CMD="${HELM_CMD} --namespace ${NAMESPACE}"
        HELM_CMD="${HELM_CMD} --set image.tag=${{ inputs.image_tag }}"
        HELM_CMD="${HELM_CMD} --set global.environment=${ENVIRONMENT}"
        HELM_CMD="${HELM_CMD} --wait --timeout=${{ inputs.helm_timeout }}"
        
        # Add environment-specific values file
        VALUES_FILE="values-${ENVIRONMENT}.yaml"
        if [ -f "${{ inputs.helm_chart_path }}/${VALUES_FILE}" ]; then
          HELM_CMD="${HELM_CMD} --values ${{ inputs.helm_chart_path }}/${VALUES_FILE}"
          echo "📄 Using environment values file: ${VALUES_FILE}"
        fi
        
        # Add additional values file if specified
        if [ -n "${{ inputs.helm_values_file }}" ] && [ -f "${{ inputs.helm_values_file }}" ]; then
          HELM_CMD="${HELM_CMD} --values ${{ inputs.helm_values_file }}"
          echo "📄 Using additional values file: ${{ inputs.helm_values_file }}"
        fi
        
        # Add dry-run flag if specified
        if [ "${{ inputs.dry_run }}" = "true" ]; then
          HELM_CMD="${HELM_CMD} --dry-run"
          echo "🔍 Performing dry run..."
        fi
        
        echo "💻 Executing: ${HELM_CMD}"
        
        # Execute deployment
        if eval ${HELM_CMD}; then
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "deployment_status=dry-run-success" >> $GITHUB_OUTPUT
            echo "✅ Dry run completed successfully"
          else
            echo "deployment_status=success" >> $GITHUB_OUTPUT
            echo "✅ Deployment completed successfully"
          fi
        else
          echo "deployment_status=failed" >> $GITHUB_OUTPUT
          echo "❌ Deployment failed"
          exit 1
        fi
        
        echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT

    - name: Verify deployment
      if: inputs.dry_run != 'true'
      shell: bash
      run: |
        NAMESPACE=${{ steps.prepare.outputs.namespace }}
        APPLICATION_NAME=${{ inputs.application_name }}
        
        echo "🔍 Verifying deployment..."
        
        # Check pods
        echo "📦 Pod status:"
        kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=${APPLICATION_NAME}
        
        # Check services
        echo "🔗 Service status:"
        kubectl get services -n ${NAMESPACE} -l app.kubernetes.io/name=${APPLICATION_NAME}
        
        # Check ingress
        echo "🌐 Ingress status:"
        kubectl get ingress -n ${NAMESPACE} -l app.kubernetes.io/name=${APPLICATION_NAME} || echo "No ingress found"
        
        # Wait for pods to be ready
        echo "⏳ Waiting for pods to be ready..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=${APPLICATION_NAME} -n ${NAMESPACE} --timeout=300s
        
        echo "✅ Deployment verification completed"

    - name: Get deployment info
      if: inputs.dry_run != 'true'
      shell: bash
      run: |
        RELEASE_NAME=${{ steps.prepare.outputs.release_name }}
        NAMESPACE=${{ steps.prepare.outputs.namespace }}
        
        echo "📊 Deployment information:"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        # Helm release status
        echo "🎯 Helm Release Status:"
        helm status ${RELEASE_NAME} -n ${NAMESPACE}
        
        echo ""
        echo "🏷️ Deployed Resources:"
        kubectl get all -n ${NAMESPACE} -l app.kubernetes.io/instance=${RELEASE_NAME}
        
        echo ""
        echo "✅ Deployment Summary:"
        echo "  Release: ${RELEASE_NAME}"
        echo "  Namespace: ${NAMESPACE}"
        echo "  Image Tag: ${{ inputs.image_tag }}"
        echo "  Environment: ${{ inputs.environment }}"
