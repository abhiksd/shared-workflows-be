name: 'Helm Deploy'
description: 'Deploys applications to AKS using Helm charts with enhanced logging'

inputs:
  environment:
    description: 'Target environment'
    required: true
  application_name:
    description: 'Application name'
    required: true
  application_type:
    description: 'Application type'
    required: true
  helm_chart_path:
    description: 'Path to Helm chart'
    required: true
  image_tag:
    description: 'Image tag'
    required: true
  helm_version:
    description: 'Helm chart version'
    required: true
  registry:
    description: 'Container registry'
    required: true
  aks_cluster_name:
    description: 'AKS cluster name (inherited from validate-environment)'
    required: true
  aks_resource_group:
    description: 'AKS resource group (inherited from validate-environment)'
    required: true
  azure_tenant_id:
    description: 'Azure Tenant ID for Key Vault'
    required: false
  azure_client_id:
    description: 'Azure Client ID (App Registration) for OIDC authentication'
    required: false
  azure_subscription_id:
    description: 'Azure Subscription ID for OIDC authentication'
    required: false

  deployment_context:
    description: 'JSON deployment context passed from validate-environment'
    required: false

outputs:
  deployment_status:
    description: 'Deployment status'
    value: ${{ steps.deploy.outputs.status }}
  release_name:
    description: 'Helm release name'
    value: ${{ steps.deploy.outputs.release_name }}
  namespace:
    description: 'Kubernetes namespace'
    value: ${{ steps.namespace.outputs.namespace }}

runs:
  using: 'composite'
  steps:
    - name: Initialize enhanced deployment logging
      run: |
        echo "üöÄ Helm Deployment Action Started with Enhanced Logging"
        echo "========================================================"
        
        # Parse and display deployment context if provided
        if [[ -n "${{ inputs.deployment_context }}" ]]; then
          echo "üìã Inherited Deployment Context:"
          echo '${{ inputs.deployment_context }}' | jq '.'
          echo ""
          
          # Extract context information for enhanced logging
          APP_NAME=$(echo '${{ inputs.deployment_context }}' | jq -r '.application // "${{ inputs.application_name }}"')
          ENV_NAME=$(echo '${{ inputs.deployment_context }}' | jq -r '.environment // "${{ inputs.environment }}"')
          TIMESTAMP=$(echo '${{ inputs.deployment_context }}' | jq -r '.timestamp // "N/A"')
          WORKFLOW_RUN=$(echo '${{ inputs.deployment_context }}' | jq -r '.workflowRun // "N/A"')
          GIT_SHA=$(echo '${{ inputs.deployment_context }}' | jq -r '.gitSha // "N/A"')
          
          echo "üéØ Deployment Session Information:"
          echo "   - Application: $APP_NAME"
          echo "   - Environment: $ENV_NAME"
          echo "   - Initiated: $TIMESTAMP"
          echo "   - Workflow Run: $WORKFLOW_RUN"
          echo "   - Git SHA: $GIT_SHA"
        else
          echo "üìù Basic deployment information (no context provided):"
          echo "   - Application: ${{ inputs.application_name }}"
          echo "   - Environment: ${{ inputs.environment }}"
        fi
        echo ""
      shell: bash

    - name: Validate inherited parameters and secrets
      run: |
        echo "üîç Validating inherited AKS deployment parameters..."
        echo "========================================================"
        
        VALIDATION_FAILED=false
        
        # Enhanced parameter validation with detailed logging
        echo "üìã Parameter Validation Results:"
        
        if [ -z "${{ inputs.aks_resource_group }}" ]; then
          echo "   ‚ùå AKS Resource Group: MISSING"
          echo "      This indicates that dynamic secret fetching failed in validate-environment"
          VALIDATION_FAILED=true
        else
          echo "   ‚úÖ AKS Resource Group: ${{ inputs.aks_resource_group }}"
        fi
        
        if [ -z "${{ inputs.aks_cluster_name }}" ]; then
          echo "   ‚ùå AKS Cluster Name: MISSING"
          echo "      This indicates that dynamic secret fetching failed in validate-environment"
          VALIDATION_FAILED=true
        else
          echo "   ‚úÖ AKS Cluster Name: ${{ inputs.aks_cluster_name }}"
        fi
        
        if [ -z "${{ inputs.azure_client_id }}" ]; then
          echo "   ‚ùå Azure Client ID: MISSING"
          VALIDATION_FAILED=true
        else
          echo "   ‚úÖ Azure Client ID: ${{ inputs.azure_client_id }}"
        fi
        
        if [ -z "${{ inputs.azure_tenant_id }}" ]; then
          echo "   ‚ùå Azure Tenant ID: MISSING"
          VALIDATION_FAILED=true
        else
          echo "   ‚úÖ Azure Tenant ID: ${{ inputs.azure_tenant_id }}"
        fi
        
        if [ -z "${{ inputs.azure_subscription_id }}" ]; then
          echo "   ‚ùå Azure Subscription ID: MISSING"
          VALIDATION_FAILED=true
        else
          echo "   ‚úÖ Azure Subscription ID: ${{ inputs.azure_subscription_id }}"
        fi
        
        if [ "$VALIDATION_FAILED" = true ]; then
          echo ""
          echo "‚ùå Parameter validation failed - cannot proceed with deployment"
          echo "   Please check that all required secrets are configured and"
          echo "   that the validate-environment job completed successfully"
          exit 1
        fi
        
        echo ""
        echo "‚úÖ All inherited parameters validated successfully"
        echo "üéØ Deployment target: ${{ inputs.aks_cluster_name }} in ${{ inputs.aks_resource_group }}"
        echo ""
      shell: bash

    - name: Azure Login with OIDC
      uses: azure/login@v2
      with:
        auth-type: IDENTITY
        # client-id: ${{ inputs.azure_client_id }}
        # tenant-id: ${{ inputs.azure_tenant_id }}
        subscription-id: ${{ inputs.azure_subscription_id }}

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Setup kubelogin for Azure AD authentication
      run: |
        echo "üîß Setting up kubelogin for Azure AD authentication..."
        echo "========================================================"
        
        # Install kubelogin if not already available
        if ! command -v kubelogin &> /dev/null; then
          echo "   üì¶ Installing kubelogin..."
          # Download and install kubelogin
          KUBELOGIN_VERSION="v0.0.34"
          curl -LO "https://github.com/Azure/kubelogin/releases/download/${KUBELOGIN_VERSION}/kubelogin-linux-amd64.zip"
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/local/bin/
          rm -rf kubelogin-linux-amd64.zip bin/
          chmod +x /usr/local/bin/kubelogin
        else
          echo "   ‚úÖ kubelogin already installed"
        fi
        
        # Verify kubelogin installation
        kubelogin --version
        echo "‚úÖ kubelogin setup completed"
        echo ""
      shell: bash

    - name: Connect to AKS cluster
      run: |
        echo "üîê Establishing AKS cluster connection..."
        echo "========================================================"
        echo "   - Target Cluster: ${{ inputs.aks_cluster_name }}"
        echo "   - Resource Group: ${{ inputs.aks_resource_group }}"
        echo "   - Environment: ${{ inputs.environment }}"
        echo "   - Authentication: Using OIDC identity-based auth"
        echo ""
      shell: bash

    - name: Get AKS credentials using identity-based authentication
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ inputs.aks_resource_group }}
        cluster-name: ${{ inputs.aks_cluster_name }}
        admin: false  # Use identity-based auth instead of admin credentials
        use-kubelogin: true  # Use kubelogin for Azure AD authentication

    - name: Verify cluster connectivity and Azure AD authentication
      run: |
        echo "üîó Verifying AKS cluster connectivity and Azure AD authentication..."
        echo "========================================================"
        
        # Check current kubectl context
        echo "   üìã Current kubectl context:"
        kubectl config current-context || echo "   ‚ö†Ô∏è  No current context set"
        
        echo ""
        echo "   üîë Verifying Azure AD authentication..."
        
        # Test Azure AD token with a simple kubectl command
        if kubectl auth can-i get pods --namespace=default; then
          echo "   ‚úÖ Azure AD authentication successful"
        else
          echo "   ‚ö†Ô∏è  Azure AD authentication may need refresh, attempting cluster-info..."
        fi
        
        echo ""
        echo "   üåê Testing cluster connectivity..."
        
        # Test cluster connection with timeout
        if timeout 30s kubectl cluster-info; then
          echo ""
          echo "‚úÖ Successfully connected to AKS cluster with Azure AD authentication"
          
          # Log additional cluster information
          echo ""
          echo "üìä Cluster Information:"
          echo "   - Kubernetes Version:"
          kubectl version --short 2>/dev/null || kubectl version --client
          
          echo ""
          echo "   - Current Context:"
          kubectl config current-context
          
          echo ""
          echo "   - Authentication Info:"
          kubectl config view --minify -o jsonpath='{.users[0].user}' | jq '.' 2>/dev/null || echo "      Using Azure AD authentication"
          
          echo ""
          echo "   - Available Namespaces:"
          kubectl get namespaces --no-headers | wc -l | xargs printf "      Total: %s namespaces\n"
          
        else
          echo ""
          echo "‚ùå Failed to connect to AKS cluster or Azure AD authentication failed"
          echo "   Please verify:"
          echo "   - AKS cluster is running and accessible"
          echo "   - Azure AD authentication is properly configured"
          echo "   - Service principal has appropriate permissions"
          echo "   - Network connectivity to the cluster"
          echo ""
          echo "   üîç Debug information:"
          echo "   - kubectl config:"
          kubectl config view --minify || true
          echo ""
          echo "   - Azure CLI status:"
          az account show || true
          exit 1
        fi
        echo ""
      shell: bash

    - name: Setup Kubernetes namespace with enhanced labeling
      run: |
        NAMESPACE="${{ inputs.environment }}-${{ inputs.application_name }}"
        
        echo "üèóÔ∏è  Setting up Kubernetes namespace with enhanced metadata..."
        echo "========================================================"
        echo "   - Namespace: $NAMESPACE"
        echo "   - Environment: ${{ inputs.environment }}"
        echo "   - Application: ${{ inputs.application_name }}"
        echo ""
        
        # Create namespace with comprehensive labels and annotations
        kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply standard labels
        kubectl label namespace ${NAMESPACE} environment=${{ inputs.environment }} --overwrite
        kubectl label namespace ${NAMESPACE} application=${{ inputs.application_name }} --overwrite
        kubectl label namespace ${NAMESPACE} managed-by=github-actions --overwrite
        kubectl label namespace ${NAMESPACE} deployment-method=helm --overwrite
        
        # Add deployment context as annotation if available
        if [[ -n "${{ inputs.deployment_context }}" ]]; then
          kubectl annotate namespace ${NAMESPACE} \
            deployment-context='${{ inputs.deployment_context }}' --overwrite
          kubectl annotate namespace ${NAMESPACE} \
            last-deployment="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" --overwrite
        fi
        
        echo "‚úÖ Namespace $NAMESPACE configured with enhanced metadata"
        echo "namespace=${NAMESPACE}" >> $GITHUB_OUTPUT
        echo ""
      shell: bash
      id: namespace

    - name: Prepare Helm values with deployment metadata
      id: values
      run: |
        NAMESPACE="${{ steps.namespace.outputs.namespace }}"
        VALUES_FILE="${{ inputs.helm_chart_path }}/values-${{ inputs.environment }}.yaml"
        RUNTIME_VALUES_FILE="values-runtime-${{ inputs.environment }}.yaml"
        
        echo "üìù Preparing Helm values with deployment metadata..."
        echo "========================================================"
        echo "   - Environment: ${{ inputs.environment }}"
        echo "   - Values file: ${VALUES_FILE}"
        echo "   - Runtime values: ${RUNTIME_VALUES_FILE}"
        echo ""
        
        # Check if environment-specific values file exists
        if [ ! -f "${VALUES_FILE}" ]; then
          echo "‚ùå Environment-specific values file not found: ${VALUES_FILE}"
          echo ""
          echo "üìã Available values files:"
          find ${{ inputs.helm_chart_path }} -name "values*.yaml" -type f | sed 's/^/   - /'
          exit 1
        fi
        
        echo "‚úÖ Environment values file found: ${VALUES_FILE}"
        
        # Create enhanced runtime values file with deployment metadata
        cat > ${RUNTIME_VALUES_FILE} << EOF
        # Enhanced runtime values for ${{ inputs.environment }} 
        # Auto-generated by GitHub Actions with deployment context
        global:
          environment: ${{ inputs.environment }}
          applicationName: ${{ inputs.application_name }}
          applicationType: ${{ inputs.application_type }}
          deploymentTimestamp: "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          
        image:
          repository: ${{ inputs.registry }}/${{ inputs.application_name }}
          tag: ${{ inputs.image_tag }}
          
        nameOverride: ${{ inputs.application_name }}
        fullnameOverride: ${{ inputs.application_name }}-${{ inputs.environment }}
        
        # Enhanced runtime environment variables
        env:
          - name: ENVIRONMENT
            value: ${{ inputs.environment }}
          - name: APPLICATION_NAME
            value: ${{ inputs.application_name }}
          - name: BUILD_VERSION
            value: ${{ inputs.image_tag }}
          - name: HELM_VERSION
            value: ${{ inputs.helm_version }}
          - name: DEPLOYMENT_NAMESPACE
            value: ${NAMESPACE}
          - name: AKS_CLUSTER_NAME
            value: ${{ inputs.aks_cluster_name }}
          - name: AKS_RESOURCE_GROUP
            value: ${{ inputs.aks_resource_group }}
        EOF
        
        # Add Spring Boot profiling configuration
        cat >> ${RUNTIME_VALUES_FILE} << EOF
        
        # Spring Boot Profile Configuration - Environment-based secret management
        springBootProfile:
          activeProfile: ${{ inputs.environment }}
          configLocation: "classpath:application-${{ inputs.environment }}.yml"
          secretManagement:
            enabled: true
            type: "kubernetes-secrets"
            namespace: ${NAMESPACE}
        EOF
        echo "‚úÖ Spring Boot profiling configuration added to runtime values"
        
        # Add deployment context metadata if available
        if [[ -n "${{ inputs.deployment_context }}" ]]; then
          DEPLOYMENT_BRANCH=$(echo '${{ inputs.deployment_context }}' | jq -r '.branch // "unknown"')
          DEPLOYMENT_EVENT=$(echo '${{ inputs.deployment_context }}' | jq -r '.event // "unknown"')
          WORKFLOW_RUN=$(echo '${{ inputs.deployment_context }}' | jq -r '.workflowRun // "unknown"')
          GIT_SHA=$(echo '${{ inputs.deployment_context }}' | jq -r '.gitSha // "unknown"')
          
          cat >> ${RUNTIME_VALUES_FILE} << EOF
        
        # Enhanced deployment metadata from GitHub Actions
        deploymentMetadata:
          branch: "${DEPLOYMENT_BRANCH}"
          event: "${DEPLOYMENT_EVENT}"
          workflowRun: "${WORKFLOW_RUN}"
          gitSha: "${GIT_SHA}"
          deployedBy: "github-actions"
          aksCluster: "${{ inputs.aks_cluster_name }}"
          aksResourceGroup: "${{ inputs.aks_resource_group }}"
        EOF
          echo "‚úÖ Enhanced deployment metadata added to runtime values"
        fi
        
        echo "values_file=${VALUES_FILE}" >> $GITHUB_OUTPUT
        echo "runtime_values_file=${RUNTIME_VALUES_FILE}" >> $GITHUB_OUTPUT
        
        echo ""
        echo "üìÑ Environment-specific values (first 20 lines):"
        echo "================================================="
        head -20 ${VALUES_FILE}
        echo "..."
        echo ""
        echo "üìÑ Runtime values with deployment metadata:"
        echo "================================================="
        cat ${RUNTIME_VALUES_FILE}
        echo ""
      shell: bash

    - name: Lint Helm chart
      run: |
        echo "üîç Linting Helm chart..."
        echo "========================================================"
        echo "   - Chart path: ${{ inputs.helm_chart_path }}"
        echo "   - Values files: Environment + Runtime"
        echo ""
        
        if helm lint ${{ inputs.helm_chart_path }} \
          -f ${{ steps.values.outputs.values_file }} \
          -f ${{ steps.values.outputs.runtime_values_file }}; then
          echo ""
          echo "‚úÖ Helm chart lint validation passed"
        else
          echo ""
          echo "‚ùå Helm chart lint validation failed"
          exit 1
        fi
        echo ""
      shell: bash

    - name: Deploy with Helm and enhanced monitoring
      id: deploy
      run: |
        NAMESPACE="${{ steps.namespace.outputs.namespace }}"
        RELEASE_NAME="${{ inputs.application_name }}-${{ inputs.environment }}"
        
        echo "üöÄ Starting Helm deployment with enhanced monitoring..."
        echo "========================================================"
        echo "   - Release: $RELEASE_NAME"
        echo "   - Namespace: $NAMESPACE"
        echo "   - Chart: ${{ inputs.helm_chart_path }}"
        echo "   - Version: ${{ inputs.helm_version }}"
        echo "   - Image: ${{ inputs.registry }}/${{ inputs.application_name }}:${{ inputs.image_tag }}"
        echo "   - Target Cluster: ${{ inputs.aks_cluster_name }}"
        echo "   - Resource Group: ${{ inputs.aks_resource_group }}"
        echo ""
        
        # Check if release exists and show status
        if helm list -n ${NAMESPACE} | grep -q ${RELEASE_NAME}; then
          echo "üì¶ Existing release found - performing upgrade..."
          echo "   Current release status:"
          helm status ${RELEASE_NAME} -n ${NAMESPACE} --short
          echo ""
          
          helm upgrade ${RELEASE_NAME} ${{ inputs.helm_chart_path }} \
            --namespace ${NAMESPACE} \
            --values ${{ steps.values.outputs.values_file }} \
            --values ${{ steps.values.outputs.runtime_values_file }} \
            --version ${{ inputs.helm_version }} \
            --wait \
            --timeout 600s \
            --atomic \
            --history-max 10
          echo "‚úÖ Helm upgrade completed successfully"
        else
          echo "üÜï New deployment - performing installation..."
          helm install ${RELEASE_NAME} ${{ inputs.helm_chart_path }} \
            --namespace ${NAMESPACE} \
            --values ${{ steps.values.outputs.values_file }} \
            --values ${{ steps.values.outputs.runtime_values_file }} \
            --version ${{ inputs.helm_version }} \
            --wait \
            --timeout 600s \
            --atomic
          echo "‚úÖ Helm installation completed successfully"
        fi
        
        echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT
        
        echo ""
        echo "üîç Post-deployment verification..."
        echo "========================================================"
        
        # Enhanced deployment status logging
        echo "üìã Pod Status:"
        kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=${{ inputs.application_name }} -o wide || true
        
        echo ""
        echo "üìã Service Status:"
        kubectl get svc -n ${NAMESPACE} -l app.kubernetes.io/name=${{ inputs.application_name }} -o wide || true
        
        echo ""
        echo "üìã Helm Release Status:"
        helm status ${RELEASE_NAME} -n ${NAMESPACE} || true
        
        echo ""
        echo "üìã Recent Events:"
        kubectl get events -n ${NAMESPACE} --sort-by='.lastTimestamp' | tail -5 || true
        
        echo ""
        echo "‚úÖ Deployment verification completed"
      shell: bash

    - name: Run enhanced deployment tests
      run: |
        NAMESPACE="${{ steps.namespace.outputs.namespace }}"
        RELEASE_NAME="${{ steps.deploy.outputs.release_name }}"
        
        echo "üß™ Running enhanced deployment tests and health checks..."
        echo "========================================================"
        
        # Run Helm tests if available
        echo "üî¨ Running Helm tests..."
        if helm test ${RELEASE_NAME} --namespace ${NAMESPACE} --timeout 300s; then
          echo "‚úÖ Helm tests passed"
        else
          echo "‚ö†Ô∏è  Helm tests failed or not available (this may be expected)"
        fi
        
        echo ""
        echo "‚è≥ Waiting for deployment to be ready..."
        
        # Wait for deployment to be ready with enhanced logging
        if kubectl wait --for=condition=available deployment/${RELEASE_NAME} -n ${NAMESPACE} --timeout=300s; then
          echo "‚úÖ Deployment is ready and healthy"
          
          # Show final pod status
          echo ""
          echo "üìä Final Pod Status:"
          kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=${{ inputs.application_name }} \
            -o custom-columns="NAME:.metadata.name,STATUS:.status.phase,READY:.status.containerStatuses[0].ready,RESTARTS:.status.containerStatuses[0].restartCount,AGE:.metadata.creationTimestamp" || true
          
        else
          echo "‚ùå Deployment failed to become ready within timeout"
          
          # Enhanced debug information
          echo ""
          echo "üîç Debug Information:"
          echo "=================="
          echo "Deployment Description:"
          kubectl describe deployment/${RELEASE_NAME} -n ${NAMESPACE} || true
          echo ""
          echo "Pod Logs (last 50 lines):"
          kubectl logs deployment/${RELEASE_NAME} -n ${NAMESPACE} --tail=50 || true
          echo ""
          echo "Recent Events:"
          kubectl get events -n ${NAMESPACE} --sort-by='.lastTimestamp' | tail -10 || true
          exit 1
        fi
        
        echo ""
        echo "‚úÖ All enhanced deployment tests completed successfully"
      shell: bash

    - name: Generate comprehensive deployment summary
      run: |
        NAMESPACE="${{ steps.namespace.outputs.namespace }}"
        RELEASE_NAME="${{ steps.deploy.outputs.release_name }}"
        
        echo "üìä Generating comprehensive deployment summary..."
        echo ""
        
        # Environment-specific success message with enhanced information
        case "${{ inputs.environment }}" in
          "dev")
            echo "üß™ Development deployment completed successfully!"
            echo "   - Quick iteration and testing enabled"
            echo "   - Auto-scaling and monitoring configured"
            ;;
          "staging")
            echo "üé≠ Staging deployment completed successfully!"
            echo "   - Pre-production validation environment ready"
            echo "   - Enhanced monitoring and alerting active"
            ;;
          "production")
            echo "üè≠ Production deployment completed successfully!"
            echo "   - Live workload deployment complete"
            echo "   - Full SLA monitoring and alerting active"
            ;;
          *)
            echo "üöÄ Deployment completed successfully!"
            ;;
        esac
        
        # Enhanced deployment summary
        cat >> $GITHUB_STEP_SUMMARY << EOF
        ## üöÄ Enhanced Deployment Summary
        
        **Application:** ${{ inputs.application_name }}  
        **Environment:** ${{ inputs.environment }}  
        **Image Tag:** ${{ inputs.image_tag }}  
        **Helm Chart Version:** ${{ inputs.helm_version }}  
        **Namespace:** ${NAMESPACE}  
        **Release Name:** ${RELEASE_NAME}  
        **AKS Cluster:** ${{ inputs.aks_cluster_name }}  
        **Resource Group:** ${{ inputs.aks_resource_group }}  
        **Registry:** ${{ inputs.registry }}  
        
        ### üìã Deployment Status
        \`\`\`
        $(kubectl get pods -n ${NAMESPACE} -l app.kubernetes.io/name=${{ inputs.application_name }} 2>/dev/null || echo "No pods found")
        \`\`\`
        
        ### üåê Service Information  
        \`\`\`
        $(kubectl get svc -n ${NAMESPACE} -l app.kubernetes.io/name=${{ inputs.application_name }} 2>/dev/null || echo "No services found")
        \`\`\`
        
        ### ‚ö° Helm Release Status
        \`\`\`
        $(helm list -n ${NAMESPACE} | grep ${RELEASE_NAME} || echo "Release not found")
        \`\`\`
        
        ### üîç Deployment Context
        $(if [[ -n "${{ inputs.deployment_context }}" ]]; then echo "\`\`\`json"; echo '${{ inputs.deployment_context }}' | jq '.'; echo "\`\`\`"; else echo "No deployment context provided"; fi)
        
        EOF
        
        echo "‚úÖ Comprehensive deployment summary generated and added to workflow summary"
      shell: bash
