name: 'Version Strategy'
description: 'Determines version tags based on environment and branch'

inputs:
  environment:
    description: 'Target environment'
    required: true
  application_name:
    description: 'Application name'
    required: true

outputs:
  version:
    description: 'Semantic version for the release'
    value: ${{ steps.version.outputs.version }}
  image_tag:
    description: 'Docker image tag'
    value: ${{ steps.version.outputs.image_tag }}
  helm_version:
    description: 'Helm chart version'
    value: ${{ steps.version.outputs.helm_version }}

runs:
  using: 'composite'
  steps:
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Get short SHA
      id: sha
      run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Determine version strategy
      id: version
      run: |
        echo "Current branch: ${{ github.ref }}"
        echo "Environment: ${{ inputs.environment }}"
        
        # Initialize variables
        VERSION=""
        IMAGE_TAG=""
        HELM_VERSION=""
        
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Tag push - use the tag as version
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          VERSION="${TAG_VERSION}"
          IMAGE_TAG="${TAG_VERSION}"
          HELM_VERSION="${TAG_VERSION}"
          echo "Using tag version: ${VERSION}"
          
        elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
          # Release branch - generate semantic version
          RELEASE_VERSION=${GITHUB_REF#refs/heads/release/}
          
          # Get the latest tag to determine next version
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: ${LATEST_TAG}"
          
          # Extract version numbers
          if [[ "${LATEST_TAG}" =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
          else
            MAJOR=0
            MINOR=0
            PATCH=0
          fi
          
          # Determine version bump based on release branch name
          if [[ "${RELEASE_VERSION}" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            VERSION="v${RELEASE_VERSION}"
          else
            # Auto-increment patch version
            PATCH=$((PATCH + 1))
            VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          IMAGE_TAG="${VERSION}"
          HELM_VERSION="${VERSION}"
          echo "Using release version: ${VERSION}"
          
        elif [[ "${{ inputs.environment }}" == "production" ]]; then
          # Production from main branch - use date-based versioning
          VERSION="v1.0.0-${{ steps.date.outputs.date }}-${{ steps.sha.outputs.short_sha }}"
          IMAGE_TAG="${VERSION}"
          HELM_VERSION="${VERSION}"
          echo "Using production version: ${VERSION}"
          
        else
          # Development/sqe - use short SHA and environment
          VERSION="${{ inputs.environment }}-${{ steps.sha.outputs.short_sha }}"
          IMAGE_TAG="${{ inputs.environment }}-${{ steps.sha.outputs.short_sha }}"
          HELM_VERSION="0.1.0-${{ inputs.environment }}-${{ steps.sha.outputs.short_sha }}"
          echo "Using development version: ${VERSION}"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "helm_version=${HELM_VERSION}" >> $GITHUB_OUTPUT
        
        echo "Final outputs:"
        echo "  version: ${VERSION}"
        echo "  image_tag: ${IMAGE_TAG}"
        echo "  helm_version: ${HELM_VERSION}"
      shell: bash