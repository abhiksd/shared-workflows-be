name: 'Version Strategy'
description: 'Determines version tags based on environment and branch'

inputs:
  environment:
    description: 'Target environment'
    required: true
  application_name:
    description: 'Application name'
    required: true

outputs:
  version:
    description: 'Semantic version for the release'
    value: ${{ steps.version.outputs.version }}
  image_tag:
    description: 'Docker image tag'
    value: ${{ steps.version.outputs.image_tag }}
  helm_version:
    description: 'Helm chart version'
    value: ${{ steps.version.outputs.helm_version }}

runs:
  using: 'composite'
  steps:
    - name: Get short SHA
      id: sha
      run: echo "short_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Determine version strategy
      id: version
      run: |
        echo "Current branch: ${{ github.ref }}"
        echo "Environment: ${{ inputs.environment }}"
        
        # Initialize variables
        VERSION=""
        IMAGE_TAG=""
        HELM_VERSION=""
        
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # Tag push - Production deployment using clean semantic version
          TAG_VERSION=${GITHUB_REF#refs/tags/}
          # Remove 'v' prefix if present for consistency, then add it back
          CLEAN_VERSION=${TAG_VERSION#v}
          VERSION="v${CLEAN_VERSION}"
          IMAGE_TAG="${VERSION}"
          HELM_VERSION="${CLEAN_VERSION}"
          echo "Using production tag version: ${VERSION}"
          
        elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
          # Release branch - PPR deployment using clean semantic version (no date/SHA)
          RELEASE_VERSION=${GITHUB_REF#refs/heads/release/}
          
          # Extract semantic version from release branch name
          if [[ "${RELEASE_VERSION}" =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            VERSION="v${MAJOR}.${MINOR}.${PATCH}"
            HELM_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          else
            # Fallback if release branch doesn't follow semantic versioning pattern
            echo "Warning: Release branch '${RELEASE_VERSION}' doesn't follow semantic versioning (x.y.z)"
            echo "Using fallback version strategy"
            VERSION="v1.0.0"
            HELM_VERSION="1.0.0"
          fi
          
          IMAGE_TAG="${VERSION}"
          echo "Using PPR release version: ${VERSION}"
          
        elif [[ "${{ inputs.environment }}" == "production" ]]; then
          # Production deployment from main branch (should ideally use tags instead)
          echo "Warning: Production deployment from non-tag ref. Consider using tags for production."
          
          # Get the latest tag to use as production version
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
          echo "Latest tag: ${LATEST_TAG}"
          
          # Use latest tag as production version
          CLEAN_VERSION=${LATEST_TAG#v}
          VERSION="v${CLEAN_VERSION}"
          IMAGE_TAG="${VERSION}"
          HELM_VERSION="${CLEAN_VERSION}"
          echo "Using production version from latest tag: ${VERSION}"
          
        elif [[ "${{ inputs.environment }}" == "ppr" ]]; then
          # PPR deployment - should use same semantic version as would be used in production
          # This handles PPR deployments from release branches
          if [[ "${GITHUB_REF}" =~ refs/heads/release/(.+) ]]; then
            RELEASE_VERSION="${BASH_REMATCH[1]}"
            if [[ "${RELEASE_VERSION}" =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR=${BASH_REMATCH[1]}
              MINOR=${BASH_REMATCH[2]}
              PATCH=${BASH_REMATCH[3]}
              VERSION="v${MAJOR}.${MINOR}.${PATCH}"
              HELM_VERSION="${MAJOR}.${MINOR}.${PATCH}"
            else
              VERSION="v1.0.0"
              HELM_VERSION="1.0.0"
            fi
          else
            # PPR from non-release branch - use semantic version
            VERSION="v1.0.0"
            HELM_VERSION="1.0.0"
          fi
          IMAGE_TAG="${VERSION}"
          echo "Using PPR version: ${VERSION}"
          
        else
          # Development/SQE - use short SHA only
          VERSION="${{ inputs.environment }}-${{ steps.sha.outputs.short_sha }}"
          IMAGE_TAG="${{ inputs.environment }}-${{ steps.sha.outputs.short_sha }}"
          HELM_VERSION="0.1.0-${{ inputs.environment }}-${{ steps.sha.outputs.short_sha }}"
          echo "Using development version: ${VERSION}"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
        echo "helm_version=${HELM_VERSION}" >> $GITHUB_OUTPUT
        
        echo "Final outputs:"
        echo "  version: ${VERSION}"
        echo "  image_tag: ${IMAGE_TAG}"
        echo "  helm_version: ${HELM_VERSION}"
      shell: bash