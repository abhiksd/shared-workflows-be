name: 'Docker Build and Push'
description: 'Composite action to build and push Docker images to ACR'
inputs:
  registry:
    description: 'Container registry URL'
    required: true
  image_name:
    description: 'Docker image name'
    required: true
  build_context:
    description: 'Docker build context path'
    required: false
    default: '.'
  dockerfile_path:
    description: 'Path to Dockerfile'
    required: false
    default: 'Dockerfile'
  environment:
    description: 'Target environment'
    required: true
  commit_sha:
    description: 'Git commit SHA for tagging'
    required: true
  build_args:
    description: 'Docker build arguments'
    required: false
    default: ''

outputs:
  image_tag:
    description: 'The full image tag that was pushed'
    value: ${{ steps.push.outputs.image_tag }}
  image_digest:
    description: 'The image digest'
    value: ${{ steps.push.outputs.image_digest }}

runs:
  using: 'composite'
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      shell: bash
      run: |
        az acr login --name $(echo ${{ inputs.registry }} | cut -d'.' -f1)
        echo "✅ Logged in to Azure Container Registry"

    - name: Generate image tags
      id: tags
      shell: bash
      run: |
        REGISTRY=${{ inputs.registry }}
        IMAGE_NAME=${{ inputs.image_name }}
        ENVIRONMENT=${{ inputs.environment }}
        COMMIT_SHA=${{ inputs.commit_sha }}
        
        # Generate tags
        COMMIT_TAG="${REGISTRY}/${IMAGE_NAME}:${ENVIRONMENT}-${COMMIT_SHA}"
        LATEST_TAG="${REGISTRY}/${IMAGE_NAME}:${ENVIRONMENT}-latest"
        
        echo "commit_tag=${COMMIT_TAG}" >> $GITHUB_OUTPUT
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        
        echo "🏷️ Generated tags:"
        echo "  Commit tag: ${COMMIT_TAG}"
        echo "  Latest tag: ${LATEST_TAG}"

    - name: Build Docker image
      shell: bash
      env:
        DOCKER_BUILDKIT: 1
      run: |
        cd ${{ inputs.build_context }}
        
        BUILD_ARGS=""
        if [ -n "${{ inputs.build_args }}" ]; then
          BUILD_ARGS="${{ inputs.build_args }}"
        fi
        
        echo "🔨 Building Docker image..."
        echo "  Context: ${{ inputs.build_context }}"
        echo "  Dockerfile: ${{ inputs.dockerfile_path }}"
        echo "  Build args: ${BUILD_ARGS}"
        
        docker build \
          -f ${{ inputs.dockerfile_path }} \
          -t ${{ steps.tags.outputs.commit_tag }} \
          -t ${{ steps.tags.outputs.latest_tag }} \
          ${BUILD_ARGS} \
          .
        
        echo "✅ Docker image built successfully"

    - name: Scan image for vulnerabilities
      shell: bash
      continue-on-error: true
      run: |
        # Install Trivy if not already installed
        if ! command -v trivy &> /dev/null; then
          echo "Installing Trivy..."
          wget -qO- https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux-64bit.tar.gz | tar xz
          sudo mv trivy /usr/local/bin/
        fi
        
        echo "🔍 Scanning image for vulnerabilities..."
        trivy image --severity HIGH,CRITICAL --no-progress ${{ steps.tags.outputs.commit_tag }} || true

    - name: Push Docker image
      id: push
      shell: bash
      run: |
        echo "⬆️ Pushing Docker images..."
        
        # Push commit-specific tag
        docker push ${{ steps.tags.outputs.commit_tag }}
        echo "✅ Pushed: ${{ steps.tags.outputs.commit_tag }}"
        
        # Push latest tag
        docker push ${{ steps.tags.outputs.latest_tag }}
        echo "✅ Pushed: ${{ steps.tags.outputs.latest_tag }}"
        
        # Get image digest
        IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.tags.outputs.commit_tag }} | cut -d'@' -f2)
        
        echo "image_tag=${{ steps.tags.outputs.commit_tag }}" >> $GITHUB_OUTPUT
        echo "image_digest=${IMAGE_DIGEST}" >> $GITHUB_OUTPUT
        
        echo "📦 Image details:"
        echo "  Tag: ${{ steps.tags.outputs.commit_tag }}"
        echo "  Digest: ${IMAGE_DIGEST}"

    - name: Clean up local images
      shell: bash
      run: |
        echo "🧹 Cleaning up local Docker images..."
        docker rmi ${{ steps.tags.outputs.commit_tag }} ${{ steps.tags.outputs.latest_tag }} || true
