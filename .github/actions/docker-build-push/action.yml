name: 'Docker Build and Push'
description: 'Builds and pushes Docker images with caching and multi-arch support'

inputs:
  application_name:
    description: 'Application name'
    required: true
  application_type:
    description: 'Application type (java-springboot, nodejs)'
    required: true
  build_context:
    description: 'Build context path'
    required: true
  dockerfile_path:
    description: 'Path to Dockerfile'
    required: true
  image_tag:
    description: 'Image tag'
    required: true
  registry:
    description: 'Container registry'
    required: true
  azure_tenant_id:
    description: 'Azure Tenant ID for OIDC authentication'
    required: true
  azure_client_id:
    description: 'Azure Client ID (App Registration) for OIDC authentication'
    required: true
  azure_subscription_id:
    description: 'Azure Subscription ID for OIDC authentication'
    required: true
  jar_artifact_name:
    description: 'Name of the JAR artifact to download (for Java applications)'
    required: false

outputs:
  image_digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}
  image_url:
    description: 'Full image URL'
    value: ${{ steps.build.outputs.image_url }}

runs:
  using: 'composite'
  steps:
    - name: Azure Login with OIDC
      uses: azure/login@v2
      with:
        auth-type: IDENTITY
        # client-id: ${{ inputs.azure_client_id }}
        # tenant-id: ${{ inputs.azure_tenant_id }}
        subscription-id: ${{ inputs.azure_subscription_id }}

    - name: Download JAR artifact
      if: inputs.application_type == 'java-springboot' && inputs.jar_artifact_name != ''
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.jar_artifact_name }}
        path: ${{ inputs.build_context }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Login to Azure Container Registry
      run: |
        # Get ACR login server name from the registry URL
        ACR_NAME=$(echo "${{ inputs.registry }}" | cut -d'.' -f1)
        echo "Logging into ACR: $ACR_NAME"
        
        # Login to ACR using OIDC authenticated Azure CLI
        az acr login --name ${ACR_NAME}
        
        echo "Successfully authenticated to ACR: ${{ inputs.registry }}"
      shell: bash

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.application_name }}
        tags: |
          type=raw,value=${{ inputs.image_tag }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up build cache
      id: cache
      run: |
        CACHE_FROM=""
        CACHE_TO=""
        
        # Configure cache based on application type
        case "${{ inputs.application_type }}" in
          "java-springboot")
            CACHE_FROM="type=gha,scope=java-${{ inputs.application_name }}"
            CACHE_TO="type=gha,mode=max,scope=java-${{ inputs.application_name }}"
            ;;
          "nodejs")
            CACHE_FROM="type=gha,scope=nodejs-${{ inputs.application_name }}"
            CACHE_TO="type=gha,mode=max,scope=nodejs-${{ inputs.application_name }}"
            ;;
          *)
            CACHE_FROM="type=gha,scope=default-${{ inputs.application_name }}"
            CACHE_TO="type=gha,mode=max,scope=default-${{ inputs.application_name }}"
            ;;
        esac
        
        echo "cache_from=${CACHE_FROM}" >> $GITHUB_OUTPUT
        echo "cache_to=${CACHE_TO}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Verify build artifacts for Java applications
      if: inputs.application_type == 'java-springboot'
      run: |
        echo "🔍 Verifying Java application build artifacts..."
        cd "${{ inputs.build_context }}"
        
        # Show current directory contents
        echo "📁 Current directory contents:"
        ls -la
        
        # List all JAR files recursively
        echo "📦 Available JAR files in build context:"
        find . -name "*.jar" -type f 2>/dev/null | while read jar; do
          echo "  - $jar ($(du -h "$jar" | cut -f1))"
        done
        
        # Count executable JAR files (excluding sources and javadoc)
        JAR_COUNT=$(find . -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" -type f 2>/dev/null | wc -l)
        
        if [ "$JAR_COUNT" -eq 0 ]; then
          echo "❌ ERROR: No executable JAR files found in build context!"
          echo "📋 This usually means:"
          echo "   1. Maven build artifacts were not uploaded properly"
          echo "   2. JAR artifact download failed"
          echo "   3. Wrong build context path specified"
          echo ""
          echo "🔍 Debugging information:"
          echo "   - Build context: ${{ inputs.build_context }}"
          echo "   - JAR artifact name: ${{ inputs.jar_artifact_name }}"
          echo "   - Current working directory: $(pwd)"
          echo ""
          exit 1
        else
          echo "✅ Found $JAR_COUNT executable JAR file(s) for Docker build:"
          find . -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" -type f -exec ls -lh {} \;
          
          # Verify JAR integrity
          echo "🔍 Verifying JAR file integrity:"
          JAR_FILE=$(find . -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" -type f | head -1)
          if [ -n "$JAR_FILE" ]; then
            echo "   - Checking: $JAR_FILE"
            jar -tf "$JAR_FILE" 2>/dev/null | head -5 || echo "   - JAR contents could not be read"
            echo "   - JAR appears to be valid"
          else
            echo "   - No JAR file found for verification"
          fi
        fi
      shell: bash

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.build_context }}
        file: ${{ inputs.dockerfile_path }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: ${{ steps.cache.outputs.cache_from }}
        cache-to: ${{ steps.cache.outputs.cache_to }}
        build-args: |
          APPLICATION_NAME=${{ inputs.application_name }}
          APPLICATION_TYPE=${{ inputs.application_type }}
          BUILD_VERSION=${{ inputs.image_tag }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          BUILD_REVISION=${{ github.sha }}

    - name: Set outputs
      id: outputs
      run: |
        IMAGE_URL="${{ inputs.registry }}/${{ inputs.application_name }}:${{ inputs.image_tag }}"
        echo "image_url=${IMAGE_URL}" >> $GITHUB_OUTPUT
        echo "Built and pushed image: ${IMAGE_URL}"
      shell: bash

    # - name: Generate SBOM
    #   uses: anchore/sbom-action@v0
    #   with:
    #     image: ${{ steps.outputs.outputs.image_url }}
    #     format: spdx-json
    #     output-file: "${{ inputs.application_name }}-sbom.spdx.json"

    # - name: Upload SBOM
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ inputs.application_name }}-sbom
    #     path: "${{ inputs.application_name }}-sbom.spdx.json"
    #     retention-days: 30
