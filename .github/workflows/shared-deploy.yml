name: Shared AKS Deployment Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (dev, staging, production)'
        required: true
        type: string
      application_name:
        description: 'Application name'
        required: true
        type: string
      application_type:
        description: 'Application type (java-springboot, nodejs)'
        required: true
        type: string
      build_context:
        description: 'Docker build context path'
        required: false
        type: string
        default: '.'
      dockerfile_path:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: 'Dockerfile'
      helm_chart_path:
        description: 'Path to Helm chart'
        required: false
        type: string
        default: 'helm'
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        type: boolean
        default: false
    secrets:
      ACR_LOGIN_SERVER:
        description: 'Azure Container Registry login server'
        required: true
      KEYVAULT_NAME:
        description: 'Azure Key Vault name'
        required: true
      AZURE_TENANT_ID:
        description: 'Azure Tenant ID for Key Vault access'
        required: true
      AZURE_CLIENT_ID:
        description: 'Azure Client ID (Managed Identity) for Key Vault access'
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: 'Azure Subscription ID'
        required: true
      # Note: AKS secrets now accessed directly as repository secrets

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  
jobs:
  validate-environment:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      target_environment: ${{ steps.check.outputs.target_environment }}
      aks_cluster_name: ${{ steps.check.outputs.aks_cluster_name }}
      aks_resource_group: ${{ steps.check.outputs.aks_resource_group }}
    steps:
      - name: Validate environment and branch rules
        id: check
        env:
          # Pass secrets as environment variables to bash script
          AKS_CLUSTER_NAME_DEV: ${{ secrets.AKS_CLUSTER_NAME_DEV }}
          AKS_RESOURCE_GROUP_DEV: ${{ secrets.AKS_RESOURCE_GROUP_DEV }}
          AKS_CLUSTER_NAME_STAGING: ${{ secrets.AKS_CLUSTER_NAME_STAGING }}
          AKS_RESOURCE_GROUP_STAGING: ${{ secrets.AKS_RESOURCE_GROUP_STAGING }}
          AKS_CLUSTER_NAME_PROD: ${{ secrets.AKS_CLUSTER_NAME_PROD }}
          AKS_RESOURCE_GROUP_PROD: ${{ secrets.AKS_RESOURCE_GROUP_PROD }}
        run: |
          ENVIRONMENT="${{ inputs.environment }}"
          GITHUB_REF="${{ github.ref }}"
          EVENT_NAME="${{ github.event_name }}"
          
          echo "Checking deployment rules for environment: $ENVIRONMENT"
          echo "GitHub ref: $GITHUB_REF"
          echo "Event name: $EVENT_NAME"
          
          SHOULD_DEPLOY="false"
          TARGET_ENV=""
          AKS_CLUSTER=""
          AKS_RG=""
          
          # Auto-detect environment if 'auto' is specified
          if [[ "$ENVIRONMENT" == "auto" ]]; then
            if [[ "$GITHUB_REF" == "refs/heads/N630-6258_Helm_deploy" ]] || [[ "$GITHUB_REF" == "refs/heads/develop" ]]; then
              TARGET_ENV="dev"
            elif [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
              TARGET_ENV="staging"
            elif [[ "$GITHUB_REF" == refs/heads/release/* ]] || [[ "$GITHUB_REF" == refs/tags/* ]]; then
              TARGET_ENV="production"
            else
              echo "❌ Auto environment detection failed: unsupported branch $GITHUB_REF"
              TARGET_ENV="unknown"
            fi
            echo "🔍 Auto-detected environment: $TARGET_ENV"
          else
            TARGET_ENV="$ENVIRONMENT"
            echo "📝 Using specified environment: $TARGET_ENV"
          fi
          
          # Debug secret access
          echo "🔍 Testing secret access via environment variables:"
          echo "AKS_CLUSTER_NAME_DEV: '$AKS_CLUSTER_NAME_DEV'"
          echo "AKS_RESOURCE_GROUP_DEV: '$AKS_RESOURCE_GROUP_DEV'"
          
          # Set environment-specific AKS configuration using environment variables
          case "$TARGET_ENV" in
            "dev")
              AKS_CLUSTER="$AKS_CLUSTER_NAME_DEV"
              AKS_RG="$AKS_RESOURCE_GROUP_DEV"
              echo "🔍 Dev environment - AKS_CLUSTER: '$AKS_CLUSTER', AKS_RG: '$AKS_RG'"
              if [[ "$GITHUB_REF" == "refs/heads/N630-6258_Helm_deploy" ]] || [[ "$GITHUB_REF" == "refs/heads/develop" ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                echo "✅ Dev deployment approved: develop branch or manual trigger"
              else
                echo "❌ Dev deployment blocked: must be develop branch or manual trigger"
              fi
              ;;
            "staging")
              AKS_CLUSTER="$AKS_CLUSTER_NAME_STAGING"
              AKS_RG="$AKS_RESOURCE_GROUP_STAGING"
              echo "🔍 Staging environment - AKS_CLUSTER: '$AKS_CLUSTER', AKS_RG: '$AKS_RG'"
              if [[ "$GITHUB_REF" == "refs/heads/main" ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                echo "✅ Staging deployment approved: main branch or manual trigger"
              else
                echo "❌ Staging deployment blocked: must be main branch or manual trigger"
              fi
              ;;
            "production")
              AKS_CLUSTER="$AKS_CLUSTER_NAME_PROD"
              AKS_RG="$AKS_RESOURCE_GROUP_PROD"
              echo "🔍 Production environment - AKS_CLUSTER: '$AKS_CLUSTER', AKS_RG: '$AKS_RG'"
              if [[ "$GITHUB_REF" == refs/heads/release/* ]] || [[ "$GITHUB_REF" == refs/tags/* ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                echo "✅ Production deployment approved: release branch, tag, or manual trigger"
              else
                echo "❌ Production deployment blocked: must be release branch, tag, or manual trigger"
              fi
              ;;
            *)
              echo "❌ Invalid environment: $TARGET_ENV"
              AKS_CLUSTER=""
              AKS_RG=""
              ;;
          esac
          
          # Debug output
          echo "📊 Environment validation results:"
          echo "   - Should deploy: $SHOULD_DEPLOY"
          echo "   - Target environment: $TARGET_ENV"
          echo "   - AKS cluster name: $AKS_CLUSTER"
          echo "   - AKS resource group: $AKS_RG"
          
          # Validate that secrets are available for valid environments
          if [ "$TARGET_ENV" != "unknown" ] && [ "$TARGET_ENV" != "" ]; then
            if [ -z "$AKS_CLUSTER" ]; then
              echo "❌ ERROR: AKS cluster name is empty for environment $TARGET_ENV"
              echo "Check that AKS_CLUSTER_NAME_${TARGET_ENV^^} repository secret is set"
              if [ "$SHOULD_DEPLOY" == "true" ]; then
                exit 1
              fi
            fi
            if [ -z "$AKS_RG" ]; then
              echo "❌ ERROR: AKS resource group is empty for environment $TARGET_ENV"
              echo "Check that AKS_RESOURCE_GROUP_${TARGET_ENV^^} repository secret is set"
              if [ "$SHOULD_DEPLOY" == "true" ]; then
                exit 1
              fi
            fi
          fi
          
          echo "=================== Setting output values ======================="
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "aks_cluster_name=$AKS_CLUSTER" >> $GITHUB_OUTPUT
          echo "aks_resource_group=$AKS_RG" >> $GITHUB_OUTPUT
          echo "Final decision: should_deploy=$SHOULD_DEPLOY, target_environment=$TARGET_ENV, aks_cluster_name=$AKS_CLUSTER, aks_resource_group=$AKS_RG"

  setup:
    runs-on: ubuntu-latest
    needs: validate-environment
    if: needs.validate-environment.outputs.should_deploy == 'true'
    outputs:
      version: ${{ steps.version.outputs.version }}
      image_tag: ${{ steps.version.outputs.image_tag }}
      helm_version: ${{ steps.version.outputs.helm_version }}
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and tags
        id: version
        uses: ./.github/actions/version-strategy
        with:
          environment: ${{ needs.validate-environment.outputs.target_environment }}
          application_name: ${{ inputs.application_name }}

      - name: Check for changes
        id: changes
        uses: ./.github/actions/check-changes
        with:
          application_name: ${{ inputs.application_name }}
          build_context: ${{ inputs.build_context }}
          force_deploy: ${{ inputs.force_deploy }}

  maven-build:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && inputs.application_type == 'java-springboot'
    outputs:
      jar_artifact: ${{ steps.maven.outputs.artifact_name }}
      build_version: ${{ steps.maven.outputs.build_version }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Java application with Maven
        id: maven
        uses: ./.github/actions/maven-build
        with:
          application_name: ${{ inputs.application_name }}
          build_context: ${{ inputs.build_context }}
          java_version: '21'
          run_tests: 'false'
          upload_artifacts: 'true'

  build:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, maven-build]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Maven build artifacts
        if: inputs.application_type == 'java-springboot'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.maven-build.outputs.jar_artifact }}
          path: ${{ inputs.build_context }}

      - name: Build and push Docker image
        uses: ./.github/actions/docker-build-push
        with:
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          build_context: ${{ inputs.build_context }}
          dockerfile_path: ${{ inputs.dockerfile_path }}
          image_tag: ${{ needs.setup.outputs.image_tag }}
          registry: ${{ env.REGISTRY }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          jar_artifact_name: ${{ needs.maven-build.outputs.jar_artifact }}

  deploy:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, build]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true'
    environment: ${{ needs.validate-environment.outputs.target_environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 🚨 DEBUG - Check received outputs
        run: |
          echo "🔍 What deploy job received from validate-environment:"
          echo "should_deploy: '${{ needs.validate-environment.outputs.should_deploy }}'"
          echo "target_environment: '${{ needs.validate-environment.outputs.target_environment }}'"
          echo "aks_cluster_name: '${{ needs.validate-environment.outputs.aks_cluster_name }}'"
          echo "aks_resource_group: '${{ needs.validate-environment.outputs.aks_resource_group }}'"
          echo ""
          echo "🔍 Checking if values are null or empty:"
          if [ -z "${{ needs.validate-environment.outputs.aks_cluster_name }}" ]; then
            echo "❌ aks_cluster_name is NULL/EMPTY in deploy job"
          else
            echo "✅ aks_cluster_name received: '${{ needs.validate-environment.outputs.aks_cluster_name }}'"
          fi
          
          if [ -z "${{ needs.validate-environment.outputs.aks_resource_group }}" ]; then
            echo "❌ aks_resource_group is NULL/EMPTY in deploy job"
          else
            echo "✅ aks_resource_group received: '${{ needs.validate-environment.outputs.aks_resource_group }}'"
          fi

      - name: Deploy to AKS
        uses: ./.github/actions/helm-deploy
        with:
          environment: ${{ needs.validate-environment.outputs.target_environment }}
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          helm_chart_path: ${{ inputs.helm_chart_path }}
          image_tag: ${{ needs.setup.outputs.image_tag }}
          helm_version: ${{ needs.setup.outputs.helm_version }}
          registry: ${{ env.REGISTRY }}
          aks_cluster_name: ${{ needs.validate-environment.outputs.aks_cluster_name }}
          aks_resource_group: ${{ needs.validate-environment.outputs.aks_resource_group }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          keyvault_name: ${{ secrets.KEYVAULT_NAME }}

  create_release:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, deploy]
    if: |
      needs.validate-environment.outputs.should_deploy == 'true' && 
      needs.setup.outputs.should_deploy == 'true' && 
      needs.validate-environment.outputs.target_environment == 'production' && 
      (startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/tags/')) &&
      !failure() && !cancelled()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: ./.github/actions/create-release
        with:
          version: ${{ needs.setup.outputs.version }}
          application_name: ${{ inputs.application_name }}