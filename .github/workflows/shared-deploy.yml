name: Shared AKS Deployment Workflow

# AKS Cluster Configuration:
# Update the environment variables in the 'env' section below to change AKS cluster settings
# No need to modify multiple locations - all environments reference these centralized values

permissions:
  id-token: write
  contents: read
  actions: read
on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (dev, sqe, ppr, prod)'
        required: true
        type: string
      application_name:
        description: 'Application name'
        required: true
        type: string
      application_type:
        description: 'Application type (java-springboot, nodejs)'
        required: true
        type: string
      build_context:
        description: 'Docker build context path'
        required: false
        type: string
        default: '.'
      dockerfile_path:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: 'Dockerfile'
      helm_chart_path:
        description: 'Path to Helm chart'
        required: false
        type: string
        default: 'helm'
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        type: boolean
        default: false
      override_branch_validation:
        description: 'Override branch validation (allows deployment from any branch)'
        required: false
        type: boolean
        default: false
      custom_image_tag:
        description: 'Custom image tag (optional - uses auto-generated if empty)'
        required: false
        type: string
        default: ''
      deploy_notes:
        description: 'Deployment notes/reason (for audit trail)'
        required: false
        type: string
        default: ''


    secrets: inherit

# Registry will be set dynamically based on environment
# env:
#   REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}  # Now environment-specific
  

  
jobs:
  validate-environment:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      target_environment: ${{ steps.check.outputs.target_environment }}
      aks_cluster_name: ${{ steps.aks-config.outputs.aks_cluster_name }}
      aks_resource_group: ${{ steps.aks-config.outputs.aks_resource_group }}
      region: ${{ steps.aks-config.outputs.region }}
    steps:
      - name: Validate environment and branch rules
        id: check
        run: |
          ENVIRONMENT="${{ inputs.environment }}"
          GITHUB_REF="${{ github.ref }}"
          EVENT_NAME="${{ github.event_name }}"
          DEPLOY_NOTES="${{ inputs.deploy_notes }}"
          
          echo "Checking deployment rules for environment: $ENVIRONMENT"
          echo "GitHub ref: $GITHUB_REF"
          echo "Event name: $EVENT_NAME"
          
          # Log deployment notes if provided
          if [[ -n "$DEPLOY_NOTES" && "$EVENT_NAME" == "workflow_dispatch" ]]; then
            echo "üìù Deployment Notes: $DEPLOY_NOTES"
          fi
          
          SHOULD_DEPLOY="false"
          TARGET_ENV=""
          AKS_CLUSTER=""
          AKS_RG=""
          
          # Auto-detect environment if 'auto' is specified
          # Lower environments (dev, sqe, future envs): Use environment-specific branches
          # Upper environments: Keep existing logic (ppr=release/**, prod=tags)
          if [[ "$ENVIRONMENT" == "auto" ]]; then
            if [[ "$GITHUB_REF" == "refs/heads/develop" ]] || [[ "$GITHUB_REF" == "refs/heads/dev" ]]; then
              TARGET_ENV="dev"
            elif [[ "$GITHUB_REF" == "refs/heads/sqe" ]]; then
              TARGET_ENV="sqe"
            elif [[ "$GITHUB_REF" == refs/heads/release/* ]]; then
              TARGET_ENV="ppr"
            elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
              TARGET_ENV="prod"
            else
              echo "‚ùå Auto environment detection failed: unsupported branch $GITHUB_REF"
              TARGET_ENV="unknown"
            fi
            echo "üîç Auto-detected environment: $TARGET_ENV"
          else
            TARGET_ENV="$ENVIRONMENT"
            echo "üìù Using specified environment: $TARGET_ENV"
          fi
          
          # Validate deployment rules based on target environment
          # Check if branch validation should be overridden
                  OVERRIDE_VALIDATION="${{ inputs.override_branch_validation }}"
        ACTOR="${{ github.actor }}"
          
          
          
          case "$TARGET_ENV" in
            "dev")
              if [[ "$GITHUB_REF" == "refs/heads/develop" ]] || [[ "$GITHUB_REF" == "refs/heads/dev" ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                if [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                  echo "‚úÖ Dev deployment approved: manual trigger with branch validation override"
                else
                  echo "‚úÖ Dev deployment approved: dev/develop branch or manual trigger"
                fi
              elif [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                SHOULD_DEPLOY="true"
                echo "‚úÖ Dev deployment approved: manual override from branch $GITHUB_REF"
              else
                echo "‚ùå Dev deployment blocked: must be dev/develop branch or use manual override"
              fi
              ;;
            "sqe")
              if [[ "$GITHUB_REF" == "refs/heads/sqe" ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                if [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                  echo "‚úÖ SQE deployment approved: manual trigger with branch validation override"
                else
                  echo "‚úÖ SQE deployment approved: sqe branch or manual trigger"
                fi
              elif [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                SHOULD_DEPLOY="true"
                echo "‚úÖ SQE deployment approved: manual override from branch $GITHUB_REF"
              else
                echo "‚ùå SQE deployment blocked: must be sqe branch or use manual override"
              fi
              ;;
            "ppr")
              if [[ "$GITHUB_REF" == refs/heads/release/* ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                if [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                  echo "‚úÖ Pre-Prod deployment approved: manual trigger with branch validation override"
                else
                  echo "‚úÖ Pre-Prod deployment approved: release branch or manual trigger"
                fi
              elif [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                SHOULD_DEPLOY="true"
                echo "‚úÖ Pre-Prod deployment approved: manual override from branch $GITHUB_REF"
              else
                echo "‚ùå Pre-Prod deployment blocked: must be release branch or use manual override"
              fi
              ;;
            "prod")
              if [[ "$GITHUB_REF" == refs/tags/* ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                if [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                  echo "‚úÖ Production deployment approved: manual trigger with branch validation override"
                  if [[ -n "$DEPLOY_NOTES" ]]; then
                    echo "   üìù Deployment Notes: $DEPLOY_NOTES"
                  fi
                else
                  echo "‚úÖ Production deployment approved: tag or manual trigger"
                fi
              elif [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                SHOULD_DEPLOY="true"
                echo "‚úÖ Production deployment approved: manual override from branch $GITHUB_REF"
                if [[ -n "$DEPLOY_NOTES" ]]; then
                  echo "   üìù Deployment Notes: $DEPLOY_NOTES"
                fi
              else
                echo "‚ùå Production deployment blocked: must be tag or use manual override"
              fi
              ;;
            *)
              echo "‚ùå Invalid environment: $TARGET_ENV"
              ;;
          esac
          
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT

    - name: Configure AKS Cluster Settings
      id: aks-config
      if: steps.check.outputs.should_deploy == 'true'
      environment: ${{ steps.check.outputs.target_environment }}
      run: |
        TARGET_ENV="${{ steps.check.outputs.target_environment }}"
        echo "üîß Configuring AKS cluster settings for environment: $TARGET_ENV"
        
        # Load AKS configuration from environment variables
        # Each environment (dev/sqe/ppr/prod) should have these same variable names with different values:
        # - AKS_CLUSTER_NAME: The name of the AKS cluster for this environment
        # - AKS_RESOURCE_GROUP: The resource group containing the AKS cluster
        # - AKS_REGION: The Azure region where the cluster is located (optional)
        AKS_CLUSTER="${{ vars.AKS_CLUSTER_NAME }}"
        AKS_RG="${{ vars.AKS_RESOURCE_GROUP }}"
        REGION="${{ vars.AKS_REGION }}"
        
        echo "üìã Environment Variables Loaded from '$TARGET_ENV' environment:"
        echo "   AKS_CLUSTER_NAME: ${AKS_CLUSTER:-'NOT_SET'}"
        echo "   AKS_RESOURCE_GROUP: ${AKS_RG:-'NOT_SET'}"
        echo "   AKS_REGION: ${REGION:-'NOT_SET (will use default)'}"
        
        # Fallback to naming convention if environment variables are not set
        if [ -z "$AKS_CLUSTER" ]; then
          echo "‚ö†Ô∏è AKS_CLUSTER_NAME environment variable not set, using naming convention"
          case "$TARGET_ENV" in
            "dev") AKS_CLUSTER="aks-dev-cluster" ;;
            "sqe") AKS_CLUSTER="aks-sqe-cluster" ;;
            "ppr") AKS_CLUSTER="aks-preprod-cluster" ;;
            "prod") AKS_CLUSTER="aks-prod-cluster" ;;
            *) 
              echo "‚ùå Unknown environment: $TARGET_ENV"
              exit 1
              ;;
          esac
        fi
        
        if [ -z "$AKS_RG" ]; then
          echo "‚ö†Ô∏è AKS_RESOURCE_GROUP environment variable not set, using naming convention"
          case "$TARGET_ENV" in
            "dev") AKS_RG="rg-aks-dev" ;;
            "sqe") AKS_RG="rg-aks-sqe" ;;
            "ppr") AKS_RG="rg-aks-preprod" ;;
            "prod") AKS_RG="rg-aks-prod" ;;
            *) 
              echo "‚ùå Unknown environment: $TARGET_ENV"
              exit 1
              ;;
          esac
        fi
        
        if [ -z "$REGION" ]; then
          echo "‚ö†Ô∏è AKS_REGION environment variable not set, using default"
          case "$TARGET_ENV" in
            "dev"|"sqe") REGION="eastus" ;;
            "ppr"|"prod") REGION="westus2" ;;
            *) REGION="eastus" ;;
          esac
        fi
        
        # Validate final configuration
        if [ -z "$AKS_CLUSTER" ]; then
          echo "‚ùå AKS cluster name could not be determined for environment: $TARGET_ENV"
          exit 1
        fi
        
        if [ -z "$AKS_RG" ]; then
          echo "‚ùå AKS resource group could not be determined for environment: $TARGET_ENV"
          exit 1
        fi
        
        # Determine configuration source for logging
        if [ "$AKS_CLUSTER" = "${{ vars.AKS_CLUSTER_NAME }}" ] && [ -n "${{ vars.AKS_CLUSTER_NAME }}" ]; then
          CONFIG_SOURCE="Environment Variables"
        else
          CONFIG_SOURCE="Fallback Naming Convention"
        fi
        
        echo "‚úÖ Final AKS Configuration:"
        echo "   Environment: $TARGET_ENV"
        echo "   Cluster Name: $AKS_CLUSTER"
        echo "   Resource Group: $AKS_RG"
        echo "   Region: $REGION"
        echo "   Configuration Source: $CONFIG_SOURCE"
        
        # Set outputs for use in subsequent jobs
        echo "aks_cluster_name=$AKS_CLUSTER" >> $GITHUB_OUTPUT
        echo "aks_resource_group=$AKS_RG" >> $GITHUB_OUTPUT
        echo "region=$REGION" >> $GITHUB_OUTPUT
        
        # Debug output
        echo "üìä Environment validation results:"
        echo "   - Should deploy: ${{ steps.check.outputs.should_deploy }}"
        echo "   - Target environment: $TARGET_ENV"
        echo "   - AKS cluster name: $AKS_CLUSTER"
        echo "   - AKS resource group: $AKS_RG"
        echo "   - Region: $REGION"
          


  setup:
    runs-on: ubuntu-latest
    needs: validate-environment
    if: needs.validate-environment.outputs.should_deploy == 'true'
    outputs:
      version: ${{ steps.version.outputs.version }}
      image_tag: ${{ steps.version.outputs.image_tag }}
      helm_version: ${{ steps.version.outputs.helm_version }}
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and tags
        id: version
        uses: ./.github/actions/version-strategy
        with:
          environment: ${{ needs.validate-environment.outputs.target_environment }}
          application_name: ${{ inputs.application_name }}
          custom_image_tag: ${{ inputs.custom_image_tag }}

      - name: Check for changes
        id: changes
        uses: ./.github/actions/check-changes
        with:
          application_name: ${{ inputs.application_name }}
          build_context: ${{ inputs.build_context }}
          force_deploy: ${{ inputs.force_deploy }}

  maven-build:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && inputs.application_type == 'java-springboot'
    outputs:
      jar_artifact: ${{ steps.maven.outputs.artifact_name }}
      build_version: ${{ steps.maven.outputs.build_version }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Java application with Maven
        id: maven
        uses: ./.github/actions/maven-build
        with:
          application_name: ${{ inputs.application_name }}
          build_context: ${{ inputs.build_context }}
          java_version: '21'
          run_tests: 'false'
          upload_artifacts: 'true'

  sonar-scan:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, maven-build]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && !failure() && !cancelled()
    outputs:
      scan_status: ${{ steps.determine-status.outputs.final_status }}
      quality_gate_status: ${{ steps.sonar.outputs.quality_gate_status }}
      coverage: ${{ steps.sonar.outputs.coverage }}
      bypass_reason: ${{ steps.determine-status.outputs.bypass_reason }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Maven build artifacts
        if: inputs.application_type == 'java-springboot'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.maven-build.outputs.jar_artifact }}
          path: ${{ inputs.build_context }}

      - name: üö® Emergency Bypass Check - SonarQube
        id: bypass-check
        run: |
          # Read emergency bypass settings from repository variables
          BYPASS_SONAR="${{ vars.EMERGENCY_BYPASS_SONAR || 'false' }}"
          ACTOR="${{ github.actor }}"
          EVENT_NAME="${{ github.event_name }}"
          ENVIRONMENT="${{ needs.validate-environment.outputs.target_environment }}"
          
          echo "üîç Checking SonarQube emergency bypass configuration..."
          echo "   Repository variable EMERGENCY_BYPASS_SONAR: $BYPASS_SONAR"
          echo "   Requested by: $ACTOR"
          echo "   Event type: $EVENT_NAME"
          echo "   Target environment: $ENVIRONMENT"
          
                  if [[ "$BYPASS_SONAR" == "true" ]]; then
          echo "üö® EMERGENCY BYPASS ACTIVATED: SonarQube scan will be bypassed"
          echo "   Repository variable EMERGENCY_BYPASS_SONAR: true"
          echo "   Requested by: $ACTOR"
          echo "   Target environment: $ENVIRONMENT"
          echo "   Reason: Emergency deployment bypass (repository configuration)"
          echo "   ‚ö†Ô∏è  SECURITY WARNING: Quality gate bypassed - immediate manual review required"
          echo ""
          echo "üìã EMERGENCY BYPASS CONDITIONS MET:"
          echo "   ‚úÖ EMERGENCY_BYPASS_SONAR repository variable set to 'true'"
          echo "   ‚úÖ Bypass approved for emergency deployment"
          echo ""
          echo "‚ö†Ô∏è  POST-DEPLOYMENT ACTIONS REQUIRED:"
          echo "   1. Delete EMERGENCY_BYPASS_SONAR repository variable immediately after deployment"
          echo "   2. Conduct manual security review of deployed code"
          echo "   3. Schedule retroactive SonarQube scan"
          echo "   4. Document emergency bypass justification"
          echo "bypass_approved=true" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Normal SonarQube scan will proceed"
          echo "   Repository variable EMERGENCY_BYPASS_SONAR: false (default)"
          echo "   Standard quality gate validation active"
          echo "bypass_approved=false" >> $GITHUB_OUTPUT
        fi

      - name: SonarQube Scan
        id: sonar
        if: vars.EMERGENCY_BYPASS_SONAR != 'true'
        uses: ./.github/actions/sonar-scan
        with:
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          build_context: ${{ inputs.build_context }}
          sonar_enabled: ${{ vars.SONAR_ENABLED || 'true' }}
          sonar_host_url: ${{ vars.SONAR_HOST_URL }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          sonar_project_key: ${{ vars.SONAR_PROJECT_KEY || inputs.application_name }}
          sonar_coverage_threshold: ${{ vars.SONAR_COVERAGE_THRESHOLD || '80' }}
          sonar_reliability_rating: ${{ vars.SONAR_RELIABILITY_RATING || '1' }}
          sonar_security_rating: ${{ vars.SONAR_SECURITY_RATING || '1' }}
          sonar_maintainability_rating: ${{ vars.SONAR_MAINTAINABILITY_RATING || '2' }}

      - name: Determine Final SonarQube Status
        id: determine-status
        run: |
          BYPASS_ENABLED="${{ vars.EMERGENCY_BYPASS_SONAR }}"
          SCAN_STATUS="${{ steps.sonar.outputs.scan_status }}"
          ACTOR="${{ github.actor }}"
          
          if [[ "$BYPASS_ENABLED" == "true" ]]; then
            echo "üö® SonarQube scan bypassed for emergency deployment"
            echo "final_status=BYPASSED" >> $GITHUB_OUTPUT
            echo "bypass_reason=Emergency bypass by $ACTOR" >> $GITHUB_OUTPUT
            
            # Log emergency bypass for audit trail
            echo "üìã EMERGENCY BYPASS AUDIT LOG:"
            echo "   Tool: SonarQube"
            echo "   User: $ACTOR"
            echo "   Timestamp: $(date -u)"
            echo "   Repository variable EMERGENCY_BYPASS_SONAR: true"
            echo "   Justification: Emergency deployment bypass"
            echo "   ‚ö†Ô∏è  Manual security review required post-deployment"
          else
            echo "‚úÖ SonarQube scan completed normally"
            echo "final_status=${SCAN_STATUS:-FAILED}" >> $GITHUB_OUTPUT
            echo "bypass_reason=N/A" >> $GITHUB_OUTPUT
          fi

  checkmarx-scan:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, maven-build]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && !failure() && !cancelled()
    outputs:
      scan_status: ${{ steps.determine-status.outputs.final_status }}
      overall_results: ${{ steps.checkmarx.outputs.overall_results }}
      scan_id: ${{ steps.checkmarx.outputs.scan_id }}
      bypass_reason: ${{ steps.determine-status.outputs.bypass_reason }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Maven build artifacts
        if: inputs.application_type == 'java-springboot'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.maven-build.outputs.jar_artifact }}
          path: ${{ inputs.build_context }}

      - name: üö® Emergency Bypass Check - Checkmarx
        id: bypass-check
        run: |
          # Read emergency bypass settings from repository variables
          BYPASS_CHECKMARX="${{ vars.EMERGENCY_BYPASS_CHECKMARX || 'false' }}"
          ACTOR="${{ github.actor }}"
          EVENT_NAME="${{ github.event_name }}"
          ENVIRONMENT="${{ needs.validate-environment.outputs.target_environment }}"
          
          echo "üîç Checking Checkmarx emergency bypass configuration..."
          echo "   Repository variable EMERGENCY_BYPASS_CHECKMARX: $BYPASS_CHECKMARX"
          echo "   Requested by: $ACTOR"
          echo "   Event type: $EVENT_NAME"
          echo "   Target environment: $ENVIRONMENT"
          
                  if [[ "$BYPASS_CHECKMARX" == "true" ]]; then
          echo "üö® EMERGENCY BYPASS ACTIVATED: Checkmarx scan will be bypassed"
          echo "   Repository variable EMERGENCY_BYPASS_CHECKMARX: true"
          echo "   Requested by: $ACTOR"
          echo "   Target environment: $ENVIRONMENT"
          echo "   Reason: Emergency deployment bypass (repository configuration)"
          echo "   ‚ö†Ô∏è  SECURITY WARNING: Security scan bypassed - immediate manual review required"
          echo ""
          echo "üìã EMERGENCY BYPASS CONDITIONS MET:"
          echo "   ‚úÖ EMERGENCY_BYPASS_CHECKMARX repository variable set to 'true'"
          echo "   ‚úÖ Bypass approved for emergency deployment"
          echo ""
          echo "‚ö†Ô∏è  POST-DEPLOYMENT ACTIONS REQUIRED:"
          echo "   1. Delete EMERGENCY_BYPASS_CHECKMARX repository variable immediately after deployment"
          echo "   2. Conduct manual security review of deployed code"
          echo "   3. Schedule retroactive Checkmarx security scan"
          echo "   4. Document emergency bypass justification"
          echo "bypass_approved=true" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ Normal Checkmarx scan will proceed"
          echo "   Repository variable EMERGENCY_BYPASS_CHECKMARX: false (default)"
          echo "   Standard security scan validation active"
          echo "bypass_approved=false" >> $GITHUB_OUTPUT
        fi

      - name: Checkmarx Scan
        id: checkmarx
        if: vars.EMERGENCY_BYPASS_CHECKMARX != 'true'
        uses: ./.github/actions/checkmarx-scan
        with:
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          build_context: ${{ inputs.build_context }}
          checkmarx_enabled: ${{ vars.CHECKMARX_ENABLED || 'true' }}
          checkmarx_url: ${{ vars.CHECKMARX_URL }}
          cx_tenant: ${{ vars.CX_TENANT }}
          checkmarx_client_id: ${{ secrets.CHECKMARX_CLIENT_ID }}
          checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}
          checkmarx_scan_types: ${{ vars.CHECKMARX_SCAN_TYPES || 'sca,sast,kics' }}
          checkmarx_sast_preset: ${{ vars.CHECKMARX_SAST_PRESET || 'Checkmarx Default' }}
          checkmarx_sca_resolver: ${{ vars.CHECKMARX_SCA_RESOLVER || 'auto' }}
          checkmarx_kics_platforms: ${{ vars.CHECKMARX_KICS_PLATFORMS || 'Docker,Kubernetes,Terraform' }}
          checkmarx_fail_build: ${{ vars.CHECKMARX_FAIL_BUILD || 'true' }}
          checkmarx_high_threshold: ${{ vars.CHECKMARX_HIGH_THRESHOLD || '0' }}
          checkmarx_medium_threshold: ${{ vars.CHECKMARX_MEDIUM_THRESHOLD || '5' }}
          checkmarx_low_threshold: ${{ vars.CHECKMARX_LOW_THRESHOLD || '10' }}

      - name: Determine Final Checkmarx Status
        id: determine-status
        run: |
          BYPASS_ENABLED="${{ vars.EMERGENCY_BYPASS_CHECKMARX }}"
          SCAN_STATUS="${{ steps.checkmarx.outputs.scan_status }}"
          ACTOR="${{ github.actor }}"
          
          if [[ "$BYPASS_ENABLED" == "true" ]]; then
            echo "üö® Checkmarx scan bypassed for emergency deployment"
            echo "final_status=BYPASSED" >> $GITHUB_OUTPUT
            echo "bypass_reason=Emergency bypass by $ACTOR" >> $GITHUB_OUTPUT
            
            # Log emergency bypass for audit trail
            echo "üìã EMERGENCY BYPASS AUDIT LOG:"
            echo "   Tool: Checkmarx"
            echo "   User: $ACTOR"
            echo "   Timestamp: $(date -u)"
            echo "   Repository variable EMERGENCY_BYPASS_CHECKMARX: true"
            echo "   Justification: Emergency deployment bypass"
            echo "   ‚ö†Ô∏è  Manual security review required post-deployment"
          else
            echo "‚úÖ Checkmarx scan completed normally"
            echo "final_status=${SCAN_STATUS:-FAILED}" >> $GITHUB_OUTPUT
            echo "bypass_reason=N/A" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, maven-build, sonar-scan, checkmarx-scan]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && (needs.sonar-scan.outputs.scan_status == 'PASSED' || needs.sonar-scan.outputs.scan_status == 'BYPASSED') && (needs.checkmarx-scan.outputs.scan_status == 'PASSED' || needs.checkmarx-scan.outputs.scan_status == 'BYPASSED') && !failure() && !cancelled()
    environment: ${{ needs.validate-environment.outputs.target_environment }}
    steps:
      - name: Clean workspace and Docker
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'true'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure Environment-Specific Settings
        id: env-config
        run: |
          echo "üîß Configuring environment-specific settings for: ${{ needs.validate-environment.outputs.target_environment }}"
          echo "üìã Environment-specific secrets loaded:"
          echo "   ACR Server: ${{ secrets.ACR_LOGIN_SERVER }}"
          echo "   Azure Tenant ID: ${{ secrets.AZURE_TENANT_ID }}"
          echo "   Azure Client ID: ${{ secrets.AZURE_CLIENT_ID }}"
          echo "   Azure Subscription: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          
          # Validate required environment secrets
          ERRORS=0
          if [ -z "${{ secrets.ACR_LOGIN_SERVER }}" ]; then
            echo "‚ùå ACR_LOGIN_SERVER not configured for environment: ${{ needs.validate-environment.outputs.target_environment }}"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "‚ùå AZURE_TENANT_ID not configured for environment: ${{ needs.validate-environment.outputs.target_environment }}"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "‚ùå AZURE_CLIENT_ID not configured for environment: ${{ needs.validate-environment.outputs.target_environment }}"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "‚ùå AZURE_SUBSCRIPTION_ID not configured for environment: ${{ needs.validate-environment.outputs.target_environment }}"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ $ERRORS -gt 0 ]; then
            echo "‚ùå $ERRORS environment secrets missing. Please configure secrets in GitHub Environment settings."
            echo "üìã Required environment secrets:"
            echo "   - AZURE_TENANT_ID"
            echo "   - AZURE_CLIENT_ID" 
            echo "   - AZURE_SUBSCRIPTION_ID"
            echo "   - ACR_LOGIN_SERVER"
            exit 1
          fi
          
          echo "‚úÖ All environment secrets validated for ${{ needs.validate-environment.outputs.target_environment }}"

      - name: Download Maven build artifacts
        if: inputs.application_type == 'java-springboot'
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.maven-build.outputs.jar_artifact }}
          path: ${{ inputs.build_context }}

      - name: Build and push Docker image
        uses: ./.github/actions/docker-build-push
        with:
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          build_context: ${{ inputs.build_context }}
          dockerfile_path: ${{ inputs.dockerfile_path }}
          image_tag: ${{ needs.setup.outputs.image_tag }}
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          jar_artifact_name: ${{ needs.maven-build.outputs.jar_artifact }}



  deploy:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, sonar-scan, checkmarx-scan, build]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && (needs.sonar-scan.outputs.scan_status == 'PASSED' || needs.sonar-scan.outputs.scan_status == 'BYPASSED') && (needs.checkmarx-scan.outputs.scan_status == 'PASSED' || needs.checkmarx-scan.outputs.scan_status == 'BYPASSED') && !failure() && !cancelled()

    environment: 
      name: ${{ needs.validate-environment.outputs.target_environment }}
      url: ${{ needs.validate-environment.outputs.target_environment == 'prod' && 'https://your-prod-app-url.com' || format('https://your-{0}-app-url.com', needs.validate-environment.outputs.target_environment) }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: üö® DEBUG - Check received outputs
        run: |
          echo "üîç What deploy job received from validate-environment:"
          echo "should_deploy: '${{ needs.validate-environment.outputs.should_deploy }}'"
          echo "target_environment: '${{ needs.validate-environment.outputs.target_environment }}'"
                  echo "aks_cluster_name: '${{ needs.validate-environment.outputs.aks_cluster_name }}'"
        echo "aks_resource_group: '${{ needs.validate-environment.outputs.aks_resource_group }}'"
          echo ""
          echo "üîç Checking if values are null or empty:"
                  if [ -z "${{ needs.validate-environment.outputs.aks_cluster_name }}" ]; then
          echo "‚ùå aks_cluster_name is NULL/EMPTY in deploy job"
        else
          echo "‚úÖ aks_cluster_name received: '${{ needs.validate-environment.outputs.aks_cluster_name }}'"
        fi
        
        if [ -z "${{ needs.validate-environment.outputs.aks_resource_group }}" ]; then
          echo "‚ùå aks_resource_group is NULL/EMPTY in deploy job"
        else
          echo "‚úÖ aks_resource_group received: '${{ needs.validate-environment.outputs.aks_resource_group }}'"
        fi

      - name: Validate Environment Secrets
        run: |
          echo "üîß Validating environment secrets for deployment to: ${{ needs.validate-environment.outputs.target_environment }}"
          echo "üìã Environment secrets check:"
          echo "   ACR Server: ${{ secrets.ACR_LOGIN_SERVER }}"
          echo "   Azure Tenant ID: ${{ secrets.AZURE_TENANT_ID }}"
          echo "   Azure Client ID: ${{ secrets.AZURE_CLIENT_ID }}"
          echo "   Azure Subscription: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          
          # Quick validation for deployment
          if [ -z "${{ secrets.ACR_LOGIN_SERVER }}" ] || [ -z "${{ secrets.AZURE_TENANT_ID }}" ] || [ -z "${{ secrets.AZURE_CLIENT_ID }}" ] || [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "‚ùå One or more environment secrets are missing for deployment"
            echo "Please configure all required secrets in GitHub Environment: ${{ needs.validate-environment.outputs.target_environment }}"
            exit 1
          fi
          
          echo "‚úÖ All environment secrets validated for deployment"

      - name: Deploy to AKS
        uses: ./.github/actions/helm-deploy
        with:
          environment: ${{ needs.validate-environment.outputs.target_environment }}
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          helm_chart_path: ${{ inputs.helm_chart_path }}
          image_tag: ${{ needs.setup.outputs.image_tag }}
          helm_version: ${{ needs.setup.outputs.helm_version }}
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          aks_cluster_name: ${{ needs.validate-environment.outputs.aks_cluster_name }}
          aks_resource_group: ${{ needs.validate-environment.outputs.aks_resource_group }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  create_release:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, deploy]
    if: |
      needs.validate-environment.outputs.should_deploy == 'true' && 
      needs.setup.outputs.should_deploy == 'true' && 
      needs.validate-environment.outputs.target_environment == 'prod' && 
      startsWith(github.ref, 'refs/tags/') &&
      !failure() && !cancelled()
    steps:
      # - name: Clean workspace
      #   uses: ./.github/actions/workspace-cleanup
      #   with:
      #     cleanup_docker: 'false'
      #     cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: ./.github/actions/create-release
        with:
          version: ${{ needs.setup.outputs.version }}
          application_name: ${{ inputs.application_name }}

  # Note: Cleanup is handled by:
  # 1. Individual job cleanup (workspace-cleanup action in each job)
  # 2. Smart Docker cleanup with build optimization
  # 3. Scheduled cleanup workflows for runner maintenance
  # Comprehensive end-of-workflow cleanup intentionally omitted to preserve
  # build cache and optimize subsequent deployment performance.
