name: Shared AKS Deployment Workflow

# AKS Cluster Configuration:
# Update the environment variables in the 'env' section below to change AKS cluster settings
# No need to modify multiple locations - all environments reference these centralized values

permissions:
  id-token: write
  contents: read
  actions: read
on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (dev, sqe, ppr, prod)'
        required: true
        type: string
      application_name:
        description: 'Application name'
        required: true
        type: string
      application_type:
        description: 'Application type (java-springboot, nodejs)'
        required: true
        type: string
      build_context:
        description: 'Docker build context path'
        required: false
        type: string
        default: '.'
      dockerfile_path:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: 'Dockerfile'
      helm_chart_path:
        description: 'Path to Helm chart'
        required: false
        type: string
        default: 'helm'
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        type: boolean
        default: false
      override_branch_validation:
        description: 'Override branch validation (allows deployment from any branch)'
        required: false
        type: boolean
        default: false
      custom_image_tag:
        description: 'Custom image tag (optional - uses auto-generated if empty)'
        required: false
        type: string
        default: ''
      deploy_notes:
        description: 'Deployment notes/reason (for audit trail)'
        required: false
        type: string
        default: ''
      emergency_deployment:
        description: 'Emergency deployment (requires additional validation for PROD/PPR)'
        required: false
        type: boolean
        default: false

    secrets: inherit

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
  # AKS Cluster Configuration - Update these values to change cluster settings
  AKS_CLUSTER_NAME_DEV: "aks-dev-cluster"
  AKS_RESOURCE_GROUP_DEV: "rg-aks-dev"
  AKS_CLUSTER_NAME_SQE: "aks-sqe-cluster"
  AKS_RESOURCE_GROUP_SQE: "rg-aks-sqe"
  AKS_CLUSTER_NAME_PPR: "aks-preprod-cluster"
  AKS_RESOURCE_GROUP_PPR: "rg-aks-preprod"
  AKS_CLUSTER_NAME_PROD: "aks-prod-cluster"
  AKS_RESOURCE_GROUP_PROD: "rg-aks-prod"
  
  # üö® EMERGENCY BYPASS CONTROLS - DevOps Team Configuration
  # Set to 'true' to enable emergency bypass for security scans
  # WARNING: Only enable for genuine emergencies, disable immediately after deployment
  # IMPORTANT: DevOps team must update these values in this workflow file
  EMERGENCY_BYPASS_SONAR: 'false'
  EMERGENCY_BYPASS_CHECKMARX: 'false'
  
jobs:
  validate-environment:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      target_environment: ${{ steps.check.outputs.target_environment }}
      aks_cluster_name_1: ${{ steps.check.outputs.aks_cluster_name }}
      aks_resource_group_1: ${{ steps.check.outputs.aks_resource_group }}
    steps:
      - name: Validate environment and branch rules
        id: check
        run: |
          ENVIRONMENT="${{ inputs.environment }}"
          GITHUB_REF="${{ github.ref }}"
          EVENT_NAME="${{ github.event_name }}"
          DEPLOY_NOTES="${{ inputs.deploy_notes }}"
          
          echo "Checking deployment rules for environment: $ENVIRONMENT"
          echo "GitHub ref: $GITHUB_REF"
          echo "Event name: $EVENT_NAME"
          
          # Log deployment notes if provided
          if [[ -n "$DEPLOY_NOTES" && "$EVENT_NAME" == "workflow_dispatch" ]]; then
            echo "üìù Deployment Notes: $DEPLOY_NOTES"
          fi
          
          SHOULD_DEPLOY="false"
          TARGET_ENV=""
          AKS_CLUSTER=""
          AKS_RG=""
          
          # Auto-detect environment if 'auto' is specified
          # Lower environments (dev, sqe, future envs): Use environment-specific branches
          # Upper environments: Keep existing logic (ppr=release/**, prod=tags)
          if [[ "$ENVIRONMENT" == "auto" ]]; then
            if [[ "$GITHUB_REF" == "refs/heads/develop" ]] || [[ "$GITHUB_REF" == "refs/heads/dev" ]]; then
              TARGET_ENV="dev"
            elif [[ "$GITHUB_REF" == "refs/heads/sqe" ]]; then
              TARGET_ENV="sqe"
            elif [[ "$GITHUB_REF" == refs/heads/release/* ]]; then
              TARGET_ENV="ppr"
            elif [[ "$GITHUB_REF" == refs/tags/* ]]; then
              TARGET_ENV="prod"
            else
              echo "‚ùå Auto environment detection failed: unsupported branch $GITHUB_REF"
              TARGET_ENV="unknown"
            fi
            echo "üîç Auto-detected environment: $TARGET_ENV"
          else
            TARGET_ENV="$ENVIRONMENT"
            echo "üìù Using specified environment: $TARGET_ENV"
          fi
          
          # Validate deployment rules based on target environment
          # Check if branch validation should be overridden
          OVERRIDE_VALIDATION="${{ inputs.override_branch_validation }}"
          EMERGENCY_DEPLOYMENT="${{ inputs.emergency_deployment }}"
          ACTOR="${{ github.actor }}"
          
          # Define authorized users for PPR and PROD deployments
          AUTHORIZED_USERS="admin,devops-lead,release-manager,platform-engineer"
          
          # Future enhancement: Team-based authorization
          # AUTHORIZED_TEAMS="devops-team,release-team,platform-team,emergency-team"
          # ORG_NAME="your-org-name"  # Set your GitHub organization name
          
          # Function to check if user is authorized for protected environments
          is_authorized_user() {
            local user="$1"
            if [[ ",$AUTHORIZED_USERS," == *",$user,"* ]]; then
              return 0
            else
              return 1
            fi
          }
          
          # Future enhancement: Function to check team membership via GitHub API
          # Requires GITHUB_TOKEN with read:org scope
          is_user_in_authorized_teams() {
            local user="$1"
            
            # Uncomment and configure when implementing team-based authorization
            # local teams=("devops-team" "release-team" "platform-team" "emergency-team")
            # 
            # for team in "${teams[@]}"; do
            #   response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            #     "https://api.github.com/orgs/$ORG_NAME/teams/$team/memberships/$user")
            #   
            #   if echo "$response" | jq -e '.state == "active"' > /dev/null 2>&1; then
            #     echo "‚úÖ User $user is member of $team"
            #     return 0
            #   fi
            # done
            
            return 1  # Default: no team membership found
          }
          
          # Function to validate protected environment deployment
          validate_protected_deployment() {
            local env="$1"
            local requires_emergency="$2"
            
            echo "üîí Validating protected environment deployment: $env"
            
            # Check if it's a manual deployment attempting override
            if [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
              
              # Check if user is authorized (individual users)
              if is_authorized_user "$ACTOR"; then
                echo "‚úÖ User '$ACTOR' individually authorized for $env deployment"
              # Future enhancement: Check team membership
              # elif is_user_in_authorized_teams "$ACTOR"; then
              #   echo "‚úÖ User '$ACTOR' authorized via team membership for $env deployment"
              else
                echo "‚ùå User '$ACTOR' is not authorized for $env deployments"
                echo "   Authorized users: $AUTHORIZED_USERS"
                # echo "   Authorized teams: $AUTHORIZED_TEAMS"  # Future enhancement
                return 1
              fi
              
              # For emergency deployments, require emergency flag
              if [[ "$requires_emergency" == "true" && "$EMERGENCY_DEPLOYMENT" != "true" ]]; then
                echo "‚ùå Emergency deployment flag required for $env manual override"
                echo "   Please set emergency_deployment=true for manual $env deployments"
                return 1
              fi
              
              echo "‚úÖ Protected deployment authorized for user '$ACTOR'"
              return 0
            fi
            
            return 0
          }
          
          case "$TARGET_ENV" in
            "dev")
              if [[ "$GITHUB_REF" == "refs/heads/develop" ]] || [[ "$GITHUB_REF" == "refs/heads/dev" ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_DEV }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_DEV }}"
                if [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                  echo "‚úÖ Dev deployment approved: manual trigger with branch validation override"
                else
                  echo "‚úÖ Dev deployment approved: dev/develop branch or manual trigger"
                fi
              elif [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_DEV }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_DEV }}"
                echo "‚úÖ Dev deployment approved: manual override from branch $GITHUB_REF"
              else
                echo "‚ùå Dev deployment blocked: must be dev/develop branch or use manual override"
              fi
              ;;
            "sqe")
              if [[ "$GITHUB_REF" == "refs/heads/sqe" ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_SQE }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_SQE }}"
                if [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                  echo "‚úÖ SQE deployment approved: manual trigger with branch validation override"
                else
                  echo "‚úÖ SQE deployment approved: sqe branch or manual trigger"
                fi
              elif [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_SQE }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_SQE }}"
                echo "‚úÖ SQE deployment approved: manual override from branch $GITHUB_REF"
              else
                echo "‚ùå SQE deployment blocked: must be sqe branch or use manual override"
              fi
              ;;
            "ppr")
              # Validate protection for PPR environment
              if ! validate_protected_deployment "PPR" "false"; then
                SHOULD_DEPLOY="false"
                echo "‚ùå PPR deployment blocked: protection validation failed"
              elif [[ "$GITHUB_REF" == refs/heads/release/* ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_PPR }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_PPR }}"
                if [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                  echo "‚úÖ Pre-Prod deployment approved: manual trigger with authorized override"
                else
                  echo "‚úÖ Pre-Prod deployment approved: release branch or authorized manual trigger"
                fi
              elif [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_PPR }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_PPR }}"
                echo "‚úÖ Pre-Prod deployment approved: authorized manual override from branch $GITHUB_REF"
              else
                echo "‚ùå Pre-Prod deployment blocked: must be release branch or authorized manual override"
              fi
              ;;
            "prod")
              # Validate protection for PROD environment (strongest protection)
              if ! validate_protected_deployment "PROD" "true"; then
                SHOULD_DEPLOY="false"
                echo "‚ùå PROD deployment blocked: protection validation failed"
              elif [[ "$GITHUB_REF" == refs/tags/* ]] || [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_PROD }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_PROD }}"
                if [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                  echo "‚úÖ Production deployment approved: EMERGENCY manual trigger with authorized override"
                  echo "   üö® EMERGENCY DEPLOYMENT: User=$ACTOR, Notes='$DEPLOY_NOTES'"
                else
                  echo "‚úÖ Production deployment approved: tag or authorized manual trigger"
                fi
              elif [[ "$EVENT_NAME" == "workflow_dispatch" && "$OVERRIDE_VALIDATION" == "true" ]]; then
                SHOULD_DEPLOY="true"
                AKS_CLUSTER="${{ env.AKS_CLUSTER_NAME_PROD }}"
                AKS_RG="${{ env.AKS_RESOURCE_GROUP_PROD }}"
                echo "‚úÖ Production deployment approved: EMERGENCY authorized manual override from branch $GITHUB_REF"
                echo "   üö® EMERGENCY DEPLOYMENT: User=$ACTOR, Notes='$DEPLOY_NOTES'"
              else
                echo "‚ùå Production deployment blocked: must be tag or authorized emergency manual override"
              fi
              ;;
            *)
              echo "‚ùå Invalid environment: $TARGET_ENV"
              ;;
          esac
          
          # Debug output
          echo "üìä Environment validation results:"
          echo "   - Should deploy: $SHOULD_DEPLOY"
          echo "   - Target environment: $TARGET_ENV"
          echo "   - AKS cluster name: $AKS_CLUSTER"
          echo "   - AKS resource group: $AKS_RG"
          
          # Validate that AKS cluster configuration is properly set
          if [ "$TARGET_ENV" != "unknown" ] && [ "$TARGET_ENV" != "" ]; then
            if [ -z "$AKS_CLUSTER" ]; then
              echo "‚ùå ERROR: AKS cluster name is empty for environment $TARGET_ENV"
              echo "Check the AKS cluster configuration in the shared workflow"
              if [ "$SHOULD_DEPLOY" == "true" ]; then
                exit 1
              fi
            fi
            if [ -z "$AKS_RG" ]; then
              echo "‚ùå ERROR: AKS resource group is empty for environment $TARGET_ENV"
              echo "Check the AKS resource group configuration in the shared workflow"
              if [ "$SHOULD_DEPLOY" == "true" ]; then
                exit 1
              fi
            fi
          fi

          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "target_environment=$TARGET_ENV" >> $GITHUB_OUTPUT
          echo "aks_cluster_name=$AKS_CLUSTER" >> $GITHUB_OUTPUT
          echo "aks_resource_group=$AKS_RG" >> $GITHUB_OUTPUT
          echo "===================setting output values =============================="
          cat $GITHUB_OUTPUT 
          echo "Final decision: should_deploy=$SHOULD_DEPLOY, target_environment=$TARGET_ENV, aks_cluster_name=$AKS_CLUSTER, aks_resource_group=$AKS_RG"

  setup:
    runs-on: ubuntu-latest
    needs: validate-environment
    if: needs.validate-environment.outputs.should_deploy == 'true'
    outputs:
      version: ${{ steps.version.outputs.version }}
      image_tag: ${{ steps.version.outputs.image_tag }}
      helm_version: ${{ steps.version.outputs.helm_version }}
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version and tags
        id: version
        uses: ./.github/actions/version-strategy
        with:
          environment: ${{ needs.validate-environment.outputs.target_environment }}
          application_name: ${{ inputs.application_name }}
          custom_image_tag: ${{ inputs.custom_image_tag }}

      - name: Check for changes
        id: changes
        uses: ./.github/actions/check-changes
        with:
          application_name: ${{ inputs.application_name }}
          build_context: ${{ inputs.build_context }}
          force_deploy: ${{ inputs.force_deploy }}

  maven-build:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && inputs.application_type == 'java-springboot'
    outputs:
      jar_artifact: ${{ steps.maven.outputs.artifact_name }}
      build_version: ${{ steps.maven.outputs.build_version }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Java application with Maven
        id: maven
        uses: ./.github/actions/maven-build
        with:
          application_name: ${{ inputs.application_name }}
          build_context: ${{ inputs.build_context }}
          java_version: '21'
          run_tests: 'false'
          upload_artifacts: 'true'

  sonar-scan:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, maven-build]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && !failure() && !cancelled()
    outputs:
      scan_status: ${{ steps.determine-status.outputs.final_status }}
      quality_gate_status: ${{ steps.sonar.outputs.quality_gate_status }}
      coverage: ${{ steps.sonar.outputs.coverage }}
      bypass_reason: ${{ steps.determine-status.outputs.bypass_reason }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Maven build artifacts
        if: inputs.application_type == 'java-springboot'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.maven-build.outputs.jar_artifact }}
          path: ${{ inputs.build_context }}

      - name: üö® Emergency Bypass Check - SonarQube
        id: bypass-check
        run: |
          # Read emergency bypass settings from workflow environment variables
          BYPASS_SONAR="${{ env.EMERGENCY_BYPASS_SONAR }}"
          ACTOR="${{ github.actor }}"
          EVENT_NAME="${{ github.event_name }}"
          ENVIRONMENT="${{ needs.validate-environment.outputs.target_environment }}"
          
          echo "üîç Checking SonarQube emergency bypass configuration..."
          echo "   Workflow env EMERGENCY_BYPASS_SONAR: $BYPASS_SONAR"
          echo "   Requested by: $ACTOR"
          echo "   Event type: $EVENT_NAME"
          echo "   Target environment: $ENVIRONMENT"
          
          # Define authorized users for emergency bypass (same as deployment authorization)
          AUTHORIZED_USERS="admin,devops-lead,release-manager,platform-engineer"
          
          # Function to check if user is authorized
          is_authorized_user() {
            local user="$1"
            if [[ ",$AUTHORIZED_USERS," == *",$user,"* ]]; then
              return 0
            else
              return 1
            fi
          }
          
          if [[ "$BYPASS_SONAR" == "true" ]]; then
            # Emergency bypass is enabled - check authorization
            if is_authorized_user "$ACTOR"; then
                          echo "üö® EMERGENCY BYPASS ACTIVATED: SonarQube scan will be bypassed"
            echo "   Workflow environment EMERGENCY_BYPASS_SONAR: true"
              echo "   Authorized user: $ACTOR"
              echo "   Target environment: $ENVIRONMENT"
                          echo "   Reason: Emergency deployment bypass (workflow configuration)"
            echo "   ‚ö†Ô∏è  SECURITY WARNING: Quality gate bypassed - immediate manual review required"
            echo ""
            echo "üìã EMERGENCY BYPASS CONDITIONS MET:"
            echo "   ‚úÖ EMERGENCY_BYPASS_SONAR environment variable set to 'true'"
              echo "   ‚úÖ User '$ACTOR' is in authorized users list"
              echo "   ‚úÖ Bypass approved for emergency deployment"
              echo ""
                          echo "‚ö†Ô∏è  POST-DEPLOYMENT ACTIONS REQUIRED:"
            echo "   1. Set EMERGENCY_BYPASS_SONAR back to 'false' in workflow immediately after deployment"
              echo "   2. Conduct manual security review of deployed code"
              echo "   3. Schedule retroactive SonarQube scan"
              echo "   4. Document emergency bypass justification"
              echo "bypass_approved=true" >> $GITHUB_OUTPUT
            else
                          echo "‚ùå EMERGENCY BYPASS DENIED: User '$ACTOR' not authorized for security scan bypass"
            echo "   Workflow environment EMERGENCY_BYPASS_SONAR: true"
              echo "   Authorized users: $AUTHORIZED_USERS"
              echo "   Current user: $ACTOR"
              echo ""
              echo "üîí SECURITY PROTECTION: Even with emergency bypass enabled,"
              echo "    only authorized users can perform emergency deployments."
              echo "bypass_approved=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "‚úÖ Normal SonarQube scan will proceed"
            echo "   Workflow environment EMERGENCY_BYPASS_SONAR: false (default)"
            echo "   Standard quality gate validation active"
            echo "bypass_approved=false" >> $GITHUB_OUTPUT
          fi

      - name: SonarQube Scan
        id: sonar
        if: steps.bypass-check.outputs.bypass_approved != 'true'
        uses: ./.github/actions/sonar-scan
        with:
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          build_context: ${{ inputs.build_context }}
          sonar_enabled: ${{ vars.SONAR_ENABLED || 'true' }}
          sonar_host_url: ${{ vars.SONAR_HOST_URL }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          sonar_project_key: ${{ vars.SONAR_PROJECT_KEY || inputs.application_name }}
          sonar_coverage_threshold: ${{ vars.SONAR_COVERAGE_THRESHOLD || '80' }}
          sonar_reliability_rating: ${{ vars.SONAR_RELIABILITY_RATING || '1' }}
          sonar_security_rating: ${{ vars.SONAR_SECURITY_RATING || '1' }}
          sonar_maintainability_rating: ${{ vars.SONAR_MAINTAINABILITY_RATING || '2' }}

      - name: Determine Final SonarQube Status
        id: determine-status
        run: |
          BYPASS_APPROVED="${{ steps.bypass-check.outputs.bypass_approved }}"
          SCAN_STATUS="${{ steps.sonar.outputs.scan_status }}"
          ACTOR="${{ github.actor }}"
          
          if [[ "$BYPASS_APPROVED" == "true" ]]; then
            echo "üö® SonarQube scan bypassed for emergency deployment"
            echo "final_status=BYPASSED" >> $GITHUB_OUTPUT
            echo "bypass_reason=Emergency bypass by $ACTOR" >> $GITHUB_OUTPUT
            
            # Log emergency bypass for audit trail
            echo "üìã EMERGENCY BYPASS AUDIT LOG:"
            echo "   Tool: SonarQube"
            echo "   User: $ACTOR"
            echo "   Timestamp: $(date -u)"
            echo "   Justification: Emergency deployment bypass"
            echo "   ‚ö†Ô∏è  Manual security review required post-deployment"
          else
            echo "‚úÖ SonarQube scan completed normally"
            echo "final_status=${SCAN_STATUS:-FAILED}" >> $GITHUB_OUTPUT
            echo "bypass_reason=N/A" >> $GITHUB_OUTPUT
          fi

  checkmarx-scan:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, maven-build]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && !failure() && !cancelled()
    outputs:
      scan_status: ${{ steps.determine-status.outputs.final_status }}
      overall_results: ${{ steps.checkmarx.outputs.overall_results }}
      scan_id: ${{ steps.checkmarx.outputs.scan_id }}
      bypass_reason: ${{ steps.determine-status.outputs.bypass_reason }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Maven build artifacts
        if: inputs.application_type == 'java-springboot'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.maven-build.outputs.jar_artifact }}
          path: ${{ inputs.build_context }}

      - name: üö® Emergency Bypass Check - Checkmarx
        id: bypass-check
        run: |
          # Read emergency bypass settings from workflow environment variables
          BYPASS_CHECKMARX="${{ env.EMERGENCY_BYPASS_CHECKMARX }}"
          ACTOR="${{ github.actor }}"
          EVENT_NAME="${{ github.event_name }}"
          ENVIRONMENT="${{ needs.validate-environment.outputs.target_environment }}"
          
          echo "üîç Checking Checkmarx emergency bypass configuration..."
          echo "   Workflow env EMERGENCY_BYPASS_CHECKMARX: $BYPASS_CHECKMARX"
          echo "   Requested by: $ACTOR"
          echo "   Event type: $EVENT_NAME"
          echo "   Target environment: $ENVIRONMENT"
          
          # Define authorized users for emergency bypass (same as deployment authorization)
          AUTHORIZED_USERS="admin,devops-lead,release-manager,platform-engineer"
          
          # Function to check if user is authorized
          is_authorized_user() {
            local user="$1"
            if [[ ",$AUTHORIZED_USERS," == *",$user,"* ]]; then
              return 0
            else
              return 1
            fi
          }
          
          if [[ "$BYPASS_CHECKMARX" == "true" ]]; then
            # Emergency bypass is enabled - check authorization
            if is_authorized_user "$ACTOR"; then
                          echo "üö® EMERGENCY BYPASS ACTIVATED: Checkmarx scan will be bypassed"
            echo "   Workflow environment EMERGENCY_BYPASS_CHECKMARX: true"
            echo "   Authorized user: $ACTOR"
            echo "   Target environment: $ENVIRONMENT"
            echo "   Reason: Emergency deployment bypass (workflow configuration)"
            echo "   ‚ö†Ô∏è  SECURITY WARNING: Security scan bypassed - immediate manual review required"
            echo ""
            echo "üìã EMERGENCY BYPASS CONDITIONS MET:"
            echo "   ‚úÖ EMERGENCY_BYPASS_CHECKMARX environment variable set to 'true'"
            echo "   ‚úÖ User '$ACTOR' is in authorized users list"
            echo "   ‚úÖ Bypass approved for emergency deployment"
            echo ""
            echo "‚ö†Ô∏è  POST-DEPLOYMENT ACTIONS REQUIRED:"
            echo "   1. Set EMERGENCY_BYPASS_CHECKMARX back to 'false' in workflow immediately after deployment"
              echo "   2. Conduct manual security review of deployed code"
              echo "   3. Schedule retroactive Checkmarx security scan"
              echo "   4. Document emergency bypass justification"
              echo "bypass_approved=true" >> $GITHUB_OUTPUT
            else
                          echo "‚ùå EMERGENCY BYPASS DENIED: User '$ACTOR' not authorized for security scan bypass"
            echo "   Workflow environment EMERGENCY_BYPASS_CHECKMARX: true"
            echo "   Authorized users: $AUTHORIZED_USERS"
            echo "   Current user: $ACTOR"
            echo ""
            echo "üîí SECURITY PROTECTION: Even with emergency bypass enabled,"
            echo "    only authorized users can perform emergency deployments."
            echo "bypass_approved=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        else
          echo "‚úÖ Normal Checkmarx scan will proceed"
          echo "   Workflow environment EMERGENCY_BYPASS_CHECKMARX: false (default)"
          echo "   Standard security scan validation active"
          echo "bypass_approved=false" >> $GITHUB_OUTPUT
        fi

      - name: Checkmarx Scan
        id: checkmarx
        if: steps.bypass-check.outputs.bypass_approved != 'true'
        uses: ./.github/actions/checkmarx-scan
        with:
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          build_context: ${{ inputs.build_context }}
          checkmarx_enabled: ${{ vars.CHECKMARX_ENABLED || 'true' }}
          checkmarx_url: ${{ vars.CHECKMARX_URL }}
          cx_tenant: ${{ vars.CX_TENANT }}
          checkmarx_client_id: ${{ secrets.CHECKMARX_CLIENT_ID }}
          checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}
          checkmarx_scan_types: ${{ vars.CHECKMARX_SCAN_TYPES || 'sca,sast,kics' }}
          checkmarx_sast_preset: ${{ vars.CHECKMARX_SAST_PRESET || 'Checkmarx Default' }}
          checkmarx_sca_resolver: ${{ vars.CHECKMARX_SCA_RESOLVER || 'auto' }}
          checkmarx_kics_platforms: ${{ vars.CHECKMARX_KICS_PLATFORMS || 'Docker,Kubernetes,Terraform' }}
          checkmarx_fail_build: ${{ vars.CHECKMARX_FAIL_BUILD || 'true' }}
          checkmarx_high_threshold: ${{ vars.CHECKMARX_HIGH_THRESHOLD || '0' }}
          checkmarx_medium_threshold: ${{ vars.CHECKMARX_MEDIUM_THRESHOLD || '5' }}
          checkmarx_low_threshold: ${{ vars.CHECKMARX_LOW_THRESHOLD || '10' }}

      - name: Determine Final Checkmarx Status
        id: determine-status
        run: |
          BYPASS_APPROVED="${{ steps.bypass-check.outputs.bypass_approved }}"
          SCAN_STATUS="${{ steps.checkmarx.outputs.scan_status }}"
          ACTOR="${{ github.actor }}"
          
          if [[ "$BYPASS_APPROVED" == "true" ]]; then
            echo "üö® Checkmarx scan bypassed for emergency deployment"
            echo "final_status=BYPASSED" >> $GITHUB_OUTPUT
            echo "bypass_reason=Emergency bypass by $ACTOR" >> $GITHUB_OUTPUT
            
            # Log emergency bypass for audit trail
            echo "üìã EMERGENCY BYPASS AUDIT LOG:"
            echo "   Tool: Checkmarx"
            echo "   User: $ACTOR"
            echo "   Timestamp: $(date -u)"
            echo "   Justification: Emergency deployment bypass"
            echo "   ‚ö†Ô∏è  Manual security review required post-deployment"
          else
            echo "‚úÖ Checkmarx scan completed normally"
            echo "final_status=${SCAN_STATUS:-FAILED}" >> $GITHUB_OUTPUT
            echo "bypass_reason=N/A" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, maven-build, sonar-scan, checkmarx-scan]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && (needs.sonar-scan.outputs.scan_status == 'PASSED' || needs.sonar-scan.outputs.scan_status == 'BYPASSED') && (needs.checkmarx-scan.outputs.scan_status == 'PASSED' || needs.checkmarx-scan.outputs.scan_status == 'BYPASSED') && !failure() && !cancelled()
    steps:
      - name: Clean workspace and Docker
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'true'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Maven build artifacts
        if: inputs.application_type == 'java-springboot'
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.maven-build.outputs.jar_artifact }}
          path: ${{ inputs.build_context }}

      - name: Build and push Docker image
        uses: ./.github/actions/docker-build-push
        with:
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          build_context: ${{ inputs.build_context }}
          dockerfile_path: ${{ inputs.dockerfile_path }}
          image_tag: ${{ needs.setup.outputs.image_tag }}
          registry: ${{ env.REGISTRY }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          jar_artifact_name: ${{ needs.maven-build.outputs.jar_artifact }}

  # Production approval gate - requires manual approval for prod deployments
  production-approval:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, sonar-scan, checkmarx-scan, build]
    if: needs.validate-environment.outputs.should_deploy == 'true' && needs.setup.outputs.should_deploy == 'true' && (needs.sonar-scan.outputs.scan_status == 'PASSED' || needs.sonar-scan.outputs.scan_status == 'BYPASSED') && (needs.checkmarx-scan.outputs.scan_status == 'PASSED' || needs.checkmarx-scan.outputs.scan_status == 'BYPASSED') && needs.validate-environment.outputs.target_environment == 'prod' && !failure() && !cancelled()
    environment: 
      name: production-approval
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    steps:
      - name: üõ°Ô∏è Production Deployment Approval Required
        run: |
          echo "üö® PRODUCTION DEPLOYMENT APPROVAL REQUIRED üö®"
          echo ""
          echo "üìã Deployment Details:"
          echo "   Application: ${{ needs.setup.outputs.application_name }}"
          echo "   Version: ${{ needs.setup.outputs.version }}"
          echo "   Image Tag: ${{ needs.setup.outputs.image_tag }}"
          echo "   Environment: ${{ needs.validate-environment.outputs.target_environment }}"
          echo "   AKS Cluster: ${{ needs.validate-environment.outputs.aks_cluster_name_1 }}"
          echo ""
          echo "‚úÖ Quality Gates Status:"
          echo "   SonarQube: ${{ needs.sonar-scan.outputs.scan_status }}"
          echo "   Checkmarx: ${{ needs.checkmarx-scan.outputs.scan_status }}"
          echo ""
          # Display emergency bypass information if applicable
          if [[ "${{ needs.sonar-scan.outputs.scan_status }}" == "BYPASSED" ]]; then
            echo "üö® EMERGENCY BYPASS ALERT - SonarQube:"
            echo "   Status: BYPASSED"
            echo "   Reason: ${{ needs.sonar-scan.outputs.bypass_reason }}"
            echo "   ‚ö†Ô∏è  Manual security review required post-deployment"
            echo ""
          fi
          if [[ "${{ needs.checkmarx-scan.outputs.scan_status }}" == "BYPASSED" ]]; then
            echo "üö® EMERGENCY BYPASS ALERT - Checkmarx:"
            echo "   Status: BYPASSED" 
            echo "   Reason: ${{ needs.checkmarx-scan.outputs.bypass_reason }}"
            echo "   ‚ö†Ô∏è  Manual security review required post-deployment"
            echo ""
          fi
          echo ""
          echo "üë• Awaiting manual approval from authorized personnel..."
          echo "‚è≥ This deployment will proceed only after manual approval."

  deploy:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, sonar-scan, checkmarx-scan, build, production-approval]
    
    # Deploy to non-prod environments directly, or to prod after approval
    if: |
      needs.validate-environment.outputs.should_deploy == 'true' && 
      needs.setup.outputs.should_deploy == 'true' && 
      (needs.sonar-scan.outputs.scan_status == 'PASSED' || needs.sonar-scan.outputs.scan_status == 'BYPASSED') && 
      (needs.checkmarx-scan.outputs.scan_status == 'PASSED' || needs.checkmarx-scan.outputs.scan_status == 'BYPASSED') && 
      !failure() && !cancelled() &&
      (
        needs.validate-environment.outputs.target_environment != 'prod' ||
        (needs.validate-environment.outputs.target_environment == 'prod' && needs.production-approval.result == 'success')
      )

    environment: 
      name: ${{ needs.validate-environment.outputs.target_environment }}
      url: ${{ needs.validate-environment.outputs.target_environment == 'prod' && 'https://your-prod-app-url.com' || format('https://your-{0}-app-url.com', needs.validate-environment.outputs.target_environment) }}
    steps:
      - name: Clean workspace
        uses: ./.github/actions/workspace-cleanup
        with:
          cleanup_docker: 'false'
          cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: üö® DEBUG - Check received outputs
        run: |
          echo "üîç What deploy job received from validate-environment:"
          echo "should_deploy: '${{ needs.validate-environment.outputs.should_deploy }}'"
          echo "target_environment: '${{ needs.validate-environment.outputs.target_environment }}'"
          echo "aks_cluster_name: '${{ needs.validate-environment.outputs.aks_cluster_name_1 }}'"
          echo "aks_resource_group: '${{ needs.validate-environment.outputs.aks_resource_group_1 }}'"
          echo ""
          echo "üîç Checking if values are null or empty:"
          if [ -z "${{ needs.validate-environment.outputs.aks_cluster_name_1 }}" ]; then
            echo "‚ùå aks_cluster_name is NULL/EMPTY in deploy job"
          else
            echo "‚úÖ aks_cluster_name received: '${{ needs.validate-environment.outputs.aks_cluster_name }}'"
          fi
          
          if [ -z "${{ needs.validate-environment.outputs.aks_resource_group_1 }}" ]; then
            echo "‚ùå aks_resource_group is NULL/EMPTY in deploy job"
          else
            echo "‚úÖ aks_resource_group received: '${{ needs.validate-environment.outputs.aks_resource_group_1 }}'"
          fi

      - name: Deploy to AKS
        uses: ./.github/actions/helm-deploy
        with:
          environment: ${{ needs.validate-environment.outputs.target_environment }}
          application_name: ${{ inputs.application_name }}
          application_type: ${{ inputs.application_type }}
          helm_chart_path: ${{ inputs.helm_chart_path }}
          image_tag: ${{ needs.setup.outputs.image_tag }}
          helm_version: ${{ needs.setup.outputs.helm_version }}
          registry: ${{ env.REGISTRY }}
          aks_cluster_name: ${{ needs.validate-environment.outputs.aks_cluster_name_1 }}
          aks_resource_group: ${{ needs.validate-environment.outputs.aks_resource_group_1 }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  create_release:
    runs-on: ubuntu-latest
    needs: [validate-environment, setup, deploy]
    if: |
      needs.validate-environment.outputs.should_deploy == 'true' && 
      needs.setup.outputs.should_deploy == 'true' && 
      needs.validate-environment.outputs.target_environment == 'prod' && 
      startsWith(github.ref, 'refs/tags/') &&
      !failure() && !cancelled()
    steps:
      # - name: Clean workspace
      #   uses: ./.github/actions/workspace-cleanup
      #   with:
      #     cleanup_docker: 'false'
      #     cleanup_temp: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: ./.github/actions/create-release
        with:
          version: ${{ needs.setup.outputs.version }}
          application_name: ${{ inputs.application_name }}

  # deploy-monitoring: REMOVED - Should be separate workflow triggered only by monitoring changes
  # Monitoring deployments should be independent of application deployments
  # Use manual dispatch or separate monitoring-specific workflow instead

  # cleanup:
  #   runs-on: ubuntu-latest
  #   #needs: [validate-environment, setup, maven-build, sonar-scan, checkmarx-scan, build, deploy, create_release]
  #   needs: [validate-environment, setup, maven-build, build, deploy, create_release]
  #   if: always() && needs.validate-environment.outputs.should_deploy == 'true'
  #   steps:
  #     - name: Final comprehensive cleanup
  #       uses: ./.github/actions/workspace-cleanup
  #       with:
  #         cleanup_docker: 'true'
  #         cleanup_temp: 'true'
