name: Deploy Node.js Backend 2

on:
  push:
    branches: [ main, staging, dev ]
    paths:
      - 'apps/nodejs-app/**'
      - 'helm/nodejs-backend2/**'
      - '.github/workflows/deploy-nodejs-backend2.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

env:
  REGISTRY: myregistry.azurecr.io
  IMAGE_NAME: nodejs-backend2

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/nodejs-app/package-lock.json

    - name: Determine environment
      id: determine-env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" = "refs/heads/staging" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

    - name: Install dependencies
      run: |
        cd apps/nodejs-app
        npm ci

    - name: Run tests
      run: |
        cd apps/nodejs-app
        npm run test

    - name: Azure CLI login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Login to Azure Container Registry
      run: |
        az acr login --name ${{ env.REGISTRY }}

    - name: Build and push Docker image
      run: |
        cd apps/nodejs-app
        docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.determine-env.outputs.environment }}-${{ github.sha }} .
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.determine-env.outputs.environment }}-${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.determine-env.outputs.environment }}-latest
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.determine-env.outputs.environment }}-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.determine-env.outputs.environment }}-latest

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

    - name: Deploy to AKS
      run: |
        helm upgrade --install nodejs-backend2-${{ steps.determine-env.outputs.environment }} ./helm/nodejs-backend2 \
          --namespace ${{ steps.determine-env.outputs.environment }} \
          --create-namespace \
          --values ./helm/nodejs-backend2/values-${{ steps.determine-env.outputs.environment }}.yaml \
          --set image.tag=${{ steps.determine-env.outputs.environment }}-${{ github.sha }} \
          --set global.environment=${{ steps.determine-env.outputs.environment }} \
          --wait --timeout=10m

    - name: Verify deployment
      run: |
        kubectl get pods -n ${{ steps.determine-env.outputs.environment }} -l app.kubernetes.io/name=nodejs-backend2
        kubectl get ingress -n ${{ steps.determine-env.outputs.environment }}
        echo "Deployment completed for Node.js Backend 2 in ${{ steps.determine-env.outputs.environment }} environment"
