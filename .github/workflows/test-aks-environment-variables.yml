name: Test AKS Environment Variables

on:
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Environment to test AKS configuration'
        required: true
        type: choice
        options:
        - dev
        - sqe
        - ppr
        - prod
      validate_all:
        description: 'Test all environments at once'
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  test-single-environment:
    runs-on: ubuntu-latest
    if: inputs.validate_all != true
    environment: ${{ inputs.test_environment }}
    steps:
      - name: Test Single Environment Configuration
        run: |
          echo "üß™ Testing AKS environment variables for: ${{ inputs.test_environment }}"
          echo "================================================================"
          echo ""
          echo "üìã Environment Variables from '${{ inputs.test_environment }}' environment:"
          echo "   AKS_CLUSTER_NAME: '${{ vars.AKS_CLUSTER_NAME }}'"
          echo "   AKS_RESOURCE_GROUP: '${{ vars.AKS_RESOURCE_GROUP }}'"
          echo "   AKS_REGION: '${{ vars.AKS_REGION }}'"
          echo ""
          
          # Validation checks
          ERRORS=0
          
          if [ -z "${{ vars.AKS_CLUSTER_NAME }}" ]; then
            echo "‚ùå ERROR: AKS_CLUSTER_NAME is not set in ${{ inputs.test_environment }} environment"
            ERRORS=$((ERRORS + 1))
          else
            echo "‚úÖ AKS_CLUSTER_NAME is configured"
          fi
          
          if [ -z "${{ vars.AKS_RESOURCE_GROUP }}" ]; then
            echo "‚ùå ERROR: AKS_RESOURCE_GROUP is not set in ${{ inputs.test_environment }} environment"
            ERRORS=$((ERRORS + 1))
          else
            echo "‚úÖ AKS_RESOURCE_GROUP is configured"
          fi
          
          if [ -z "${{ vars.AKS_REGION }}" ]; then
            echo "‚ö†Ô∏è WARNING: AKS_REGION is not set (will use default)"
          else
            echo "‚úÖ AKS_REGION is configured"
          fi
          
          echo ""
          echo "üìä Test Results:"
          if [ $ERRORS -eq 0 ]; then
            echo "‚úÖ All required variables are configured for ${{ inputs.test_environment }}"
            echo "üéØ Environment is ready for deployment"
          else
            echo "‚ùå $ERRORS error(s) found in ${{ inputs.test_environment }} configuration"
            echo "üîß Please configure missing variables in GitHub Environment settings"
            exit 1
          fi

  test-all-environments:
    runs-on: ubuntu-latest
    if: inputs.validate_all == true
    strategy:
      matrix:
        environment: [dev, sqe, ppr, prod]
      fail-fast: false
    environment: ${{ matrix.environment }}
    steps:
      - name: Test Environment Configuration
        run: |
          echo "üß™ Testing AKS configuration for: ${{ matrix.environment }}"
          echo "================================================"
          echo ""
          echo "üìã Environment Variables:"
          echo "   AKS_CLUSTER_NAME: '${{ vars.AKS_CLUSTER_NAME }}'"
          echo "   AKS_RESOURCE_GROUP: '${{ vars.AKS_RESOURCE_GROUP }}'"
          echo "   AKS_REGION: '${{ vars.AKS_REGION }}'"
          echo ""
          
          # Quick validation
          ERRORS=0
          
          if [ -z "${{ vars.AKS_CLUSTER_NAME }}" ]; then
            echo "‚ùå AKS_CLUSTER_NAME not set"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ -z "${{ vars.AKS_RESOURCE_GROUP }}" ]; then
            echo "‚ùå AKS_RESOURCE_GROUP not set"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ $ERRORS -eq 0 ]; then
            echo "‚úÖ Configuration valid for ${{ matrix.environment }}"
          else
            echo "‚ùå Configuration incomplete for ${{ matrix.environment }}"
            exit 1
          fi

  generate-summary-report:
    runs-on: ubuntu-latest
    if: inputs.validate_all == true
    needs: test-all-environments
    steps:
      - name: Generate Configuration Summary
        run: |
          echo "üìä AKS ENVIRONMENT VARIABLES VALIDATION SUMMARY"
          echo "=============================================="
          echo ""
          echo "üéØ Test Results:"
          echo "   Test Type: All Environments"
          echo "   Timestamp: $(date -u)"
          echo "   Triggered By: ${{ github.actor }}"
          echo ""
          echo "üìã Environment Status:"
          
          # The individual jobs will show their own results
          # This is a summary job that runs after all tests
          if [ "${{ needs.test-all-environments.result }}" = "success" ]; then
            echo "   ‚úÖ All environments configured correctly"
            echo ""
            echo "üöÄ Ready for Deployment:"
            echo "   - All required AKS variables are set"
            echo "   - Dynamic cluster selection is ready"
            echo "   - Environments: dev, sqe, ppr, prod"
          else
            echo "   ‚ùå Some environments have configuration issues"
            echo ""
            echo "üîß Next Steps:"
            echo "   1. Check individual job results above"
            echo "   2. Configure missing variables in GitHub Environment settings"
            echo "   3. Re-run this test workflow"
            echo ""
            echo "üìã Required Variables (same names, different values per environment):"
            echo "   - AKS_CLUSTER_NAME"
            echo "   - AKS_RESOURCE_GROUP"
            echo "   - AKS_REGION (optional)"
          fi

  simulate-deployment-workflow:
    runs-on: ubuntu-latest
    if: inputs.validate_all != true
    needs: test-single-environment
    environment: ${{ inputs.test_environment }}
    steps:
      - name: Simulate Deployment Configuration Loading
        run: |
          echo "üîÑ Simulating deployment workflow for: ${{ inputs.test_environment }}"
          echo "================================================================"
          echo ""
          
          # Simulate the same logic as in the actual deployment workflow
          TARGET_ENV="${{ inputs.test_environment }}"
          echo "üîß Configuring AKS cluster settings for environment: $TARGET_ENV"
          
          # Load AKS configuration from environment variables (same as deployment workflow)
          AKS_CLUSTER="${{ vars.AKS_CLUSTER_NAME }}"
          AKS_RG="${{ vars.AKS_RESOURCE_GROUP }}"
          REGION="${{ vars.AKS_REGION }}"
          
          echo "üìã Environment Variables Loaded from '$TARGET_ENV' environment:"
          echo "   AKS_CLUSTER_NAME: ${AKS_CLUSTER:-'NOT_SET'}"
          echo "   AKS_RESOURCE_GROUP: ${AKS_RG:-'NOT_SET'}"
          echo "   AKS_REGION: ${REGION:-'NOT_SET (will use default)'}"
          
          # Fallback logic (same as deployment workflow)
          if [ -z "$AKS_CLUSTER" ]; then
            echo "‚ö†Ô∏è AKS_CLUSTER_NAME environment variable not set, using naming convention"
            case "$TARGET_ENV" in
              "dev") AKS_CLUSTER="aks-dev-cluster" ;;
              "sqe") AKS_CLUSTER="aks-sqe-cluster" ;;
              "ppr") AKS_CLUSTER="aks-preprod-cluster" ;;
              "prod") AKS_CLUSTER="aks-prod-cluster" ;;
              *) 
                echo "‚ùå Unknown environment: $TARGET_ENV"
                exit 1
                ;;
            esac
          fi
          
          if [ -z "$AKS_RG" ]; then
            echo "‚ö†Ô∏è AKS_RESOURCE_GROUP environment variable not set, using naming convention"
            case "$TARGET_ENV" in
              "dev") AKS_RG="rg-aks-dev" ;;
              "sqe") AKS_RG="rg-aks-sqe" ;;
              "ppr") AKS_RG="rg-aks-preprod" ;;
              "prod") AKS_RG="rg-aks-prod" ;;
              *) 
                echo "‚ùå Unknown environment: $TARGET_ENV"
                exit 1
                ;;
            esac
          fi
          
          if [ -z "$REGION" ]; then
            echo "‚ö†Ô∏è AKS_REGION environment variable not set, using default"
            case "$TARGET_ENV" in
              "dev"|"sqe") REGION="eastus" ;;
              "ppr"|"prod") REGION="westus2" ;;
              *) REGION="eastus" ;;
            esac
          fi
          
          # Determine configuration source
          if [ "$AKS_CLUSTER" = "${{ vars.AKS_CLUSTER_NAME }}" ] && [ -n "${{ vars.AKS_CLUSTER_NAME }}" ]; then
            CONFIG_SOURCE="Environment Variables"
          else
            CONFIG_SOURCE="Fallback Naming Convention"
          fi
          
          echo ""
          echo "‚úÖ Final AKS Configuration (same as deployment workflow):"
          echo "   Environment: $TARGET_ENV"
          echo "   Cluster Name: $AKS_CLUSTER"
          echo "   Resource Group: $AKS_RG"
          echo "   Region: $REGION"
          echo "   Configuration Source: $CONFIG_SOURCE"
          echo ""
          
          if [ "$CONFIG_SOURCE" = "Environment Variables" ]; then
            echo "üéØ SUCCESS: Dynamic configuration is working!"
            echo "   ‚úÖ Environment variables are properly configured"
            echo "   ‚úÖ Deployment workflow will use custom cluster names"
          else
            echo "‚ö†Ô∏è FALLBACK: Using naming convention"
            echo "   ‚ÑπÔ∏è Environment variables not configured - using defaults"
            echo "   üîß Configure environment variables for custom cluster names"
          fi