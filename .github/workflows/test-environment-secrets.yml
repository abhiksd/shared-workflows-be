name: Test Environment Secrets

on:
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Environment to test secrets configuration'
        required: true
        type: choice
        options:
        - dev
        - sqe
        - ppr
        - prod
      test_all_environments:
        description: 'Test all environments at once'
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  test-repository-secrets:
    runs-on: ubuntu-latest
    if: inputs.test_all_environments == true || inputs.test_environment != ''
    steps:
      - name: Test Common/Repository Secrets
        run: |
          echo "üß™ Testing repository-level (common) secrets..."
          echo "================================================"
          echo ""
          
          ERRORS=0
          
          # Test SonarQube secrets
          echo "üîç Testing SonarQube secrets:"
          if [ -z "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "   ‚ùå SONAR_TOKEN not set"
            ERRORS=$((ERRORS + 1))
          else
            echo "   ‚úÖ SONAR_TOKEN configured"
          fi
          
          if [ -z "${{ secrets.SONAR_HOST_URL }}" ]; then
            echo "   ‚ùå SONAR_HOST_URL not set"
            ERRORS=$((ERRORS + 1))
          else
            echo "   ‚úÖ SONAR_HOST_URL configured"
          fi
          
          # Test Checkmarx secrets
          echo ""
          echo "üîç Testing Checkmarx secrets:"
          if [ -z "${{ secrets.CHECKMARX_CLIENT_ID }}" ]; then
            echo "   ‚ùå CHECKMARX_CLIENT_ID not set"
            ERRORS=$((ERRORS + 1))
          else
            echo "   ‚úÖ CHECKMARX_CLIENT_ID configured"
          fi
          
          if [ -z "${{ secrets.CHECKMARX_CLIENT_SECRET }}" ]; then
            echo "   ‚ùå CHECKMARX_CLIENT_SECRET not set"
            ERRORS=$((ERRORS + 1))
          else
            echo "   ‚úÖ CHECKMARX_CLIENT_SECRET configured"
          fi
          
          if [ -z "${{ secrets.CHECKMARX_URL }}" ]; then
            echo "   ‚ùå CHECKMARX_URL not set"
            ERRORS=$((ERRORS + 1))
          else
            echo "   ‚úÖ CHECKMARX_URL configured"
          fi
          
          echo ""
          echo "üìä Repository Secrets Summary:"
          if [ $ERRORS -eq 0 ]; then
            echo "   ‚úÖ All repository secrets are properly configured"
            echo "   üéØ SonarQube and Checkmarx ready for all environments"
          else
            echo "   ‚ùå $ERRORS repository secrets missing"
            echo "   üîß Configure missing secrets in Repository ‚Üí Settings ‚Üí Secrets"
            exit 1
          fi

  test-single-environment:
    runs-on: ubuntu-latest
    if: inputs.test_all_environments != true && inputs.test_environment != ''
    environment: ${{ inputs.test_environment }}
    needs: test-repository-secrets
    steps:
      - name: Test Environment-Specific Secrets
        run: |
          echo "üß™ Testing environment-specific secrets for: ${{ inputs.test_environment }}"
          echo "================================================================"
          echo ""
          echo "üìã Environment Secrets from '${{ inputs.test_environment }}' environment:"
          echo "   AZURE_TENANT_ID: '${{ secrets.AZURE_TENANT_ID }}'"
          echo "   AZURE_CLIENT_ID: '${{ secrets.AZURE_CLIENT_ID }}'"
          echo "   AZURE_SUBSCRIPTION_ID: '${{ secrets.AZURE_SUBSCRIPTION_ID }}'"
          echo "   ACR_LOGIN_SERVER: '${{ secrets.ACR_LOGIN_SERVER }}'"
          echo ""
          
          # Validation checks
          ERRORS=0
          
          echo "üîç Validating required environment secrets:"
          
          # Test Azure secrets
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "   ‚ùå AZURE_TENANT_ID not set in ${{ inputs.test_environment }} environment"
            ERRORS=$((ERRORS + 1))
          else
            echo "   ‚úÖ AZURE_TENANT_ID configured"
          fi
          
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "   ‚ùå AZURE_CLIENT_ID not set in ${{ inputs.test_environment }} environment"
            ERRORS=$((ERRORS + 1))
          else
            echo "   ‚úÖ AZURE_CLIENT_ID configured"
          fi
          
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "   ‚ùå AZURE_SUBSCRIPTION_ID not set in ${{ inputs.test_environment }} environment"
            ERRORS=$((ERRORS + 1))
          else
            echo "   ‚úÖ AZURE_SUBSCRIPTION_ID configured"
          fi
          
          if [ -z "${{ secrets.ACR_LOGIN_SERVER }}" ]; then
            echo "   ‚ùå ACR_LOGIN_SERVER not set in ${{ inputs.test_environment }} environment"
            ERRORS=$((ERRORS + 1))
          else
            echo "   ‚úÖ ACR_LOGIN_SERVER configured"
          fi
          
          # Test optional secrets
          echo ""
          echo "üîç Checking optional environment secrets:"
          if [ -z "${{ secrets.ACR_USERNAME }}" ]; then
            echo "   ‚ö†Ô∏è ACR_USERNAME not set (optional)"
          else
            echo "   ‚úÖ ACR_USERNAME configured"
          fi
          
          if [ -z "${{ secrets.ACR_PASSWORD }}" ]; then
            echo "   ‚ö†Ô∏è ACR_PASSWORD not set (optional)"
          else
            echo "   ‚úÖ ACR_PASSWORD configured"
          fi
          
          echo ""
          echo "üìä Environment Secrets Test Results:"
          if [ $ERRORS -eq 0 ]; then
            echo "   ‚úÖ All required environment secrets are configured for ${{ inputs.test_environment }}"
            echo "   üéØ Environment is ready for deployment"
          else
            echo "   ‚ùå $ERRORS required secret(s) missing in ${{ inputs.test_environment }} configuration"
            echo "   üîß Please configure missing secrets in GitHub Environment settings"
            echo ""
            echo "   üìã Required secrets for each environment:"
            echo "      - AZURE_TENANT_ID"
            echo "      - AZURE_CLIENT_ID"
            echo "      - AZURE_SUBSCRIPTION_ID"
            echo "      - ACR_LOGIN_SERVER"
            exit 1
          fi

  test-all-environments:
    runs-on: ubuntu-latest
    if: inputs.test_all_environments == true
    needs: test-repository-secrets
    strategy:
      matrix:
        environment: [dev, sqe, ppr, prod]
      fail-fast: false
    environment: ${{ matrix.environment }}
    steps:
      - name: Test Environment Configuration
        run: |
          echo "üß™ Testing environment secrets for: ${{ matrix.environment }}"
          echo "=============================================="
          echo ""
          echo "üìã Environment Secrets:"
          echo "   AZURE_TENANT_ID: '${{ secrets.AZURE_TENANT_ID }}'"
          echo "   AZURE_CLIENT_ID: '${{ secrets.AZURE_CLIENT_ID }}'"
          echo "   AZURE_SUBSCRIPTION_ID: '${{ secrets.AZURE_SUBSCRIPTION_ID }}'"
          echo "   ACR_LOGIN_SERVER: '${{ secrets.ACR_LOGIN_SERVER }}'"
          echo ""
          
          # Quick validation
          ERRORS=0
          
          if [ -z "${{ secrets.AZURE_TENANT_ID }}" ]; then
            echo "‚ùå AZURE_TENANT_ID not set"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ -z "${{ secrets.AZURE_CLIENT_ID }}" ]; then
            echo "‚ùå AZURE_CLIENT_ID not set"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "‚ùå AZURE_SUBSCRIPTION_ID not set"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ -z "${{ secrets.ACR_LOGIN_SERVER }}" ]; then
            echo "‚ùå ACR_LOGIN_SERVER not set"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ $ERRORS -eq 0 ]; then
            echo "‚úÖ All required secrets configured for ${{ matrix.environment }}"
          else
            echo "‚ùå $ERRORS required secrets missing in ${{ matrix.environment }}"
            exit 1
          fi

  simulate-deployment-secrets:
    runs-on: ubuntu-latest
    if: inputs.test_all_environments != true && inputs.test_environment != ''
    needs: test-single-environment
    environment: ${{ inputs.test_environment }}
    steps:
      - name: Simulate Deployment Workflow Secrets Usage
        run: |
          echo "üîÑ Simulating deployment workflow secrets usage for: ${{ inputs.test_environment }}"
          echo "================================================================"
          echo ""
          
          # Simulate the same logic as in the actual deployment workflow
          TARGET_ENV="${{ inputs.test_environment }}"
          echo "üîß Testing secrets configuration for deployment to: $TARGET_ENV"
          
          # Load environment-specific secrets (same as deployment workflow)
          AZURE_TENANT_ID="${{ secrets.AZURE_TENANT_ID }}"
          AZURE_CLIENT_ID="${{ secrets.AZURE_CLIENT_ID }}"
          AZURE_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          ACR_LOGIN_SERVER="${{ secrets.ACR_LOGIN_SERVER }}"
          
          echo "üìã Environment Secrets Loaded from '$TARGET_ENV' environment:"
          echo "   AZURE_TENANT_ID: ${AZURE_TENANT_ID:-'NOT_SET'}"
          echo "   AZURE_CLIENT_ID: ${AZURE_CLIENT_ID:-'NOT_SET'}"
          echo "   AZURE_SUBSCRIPTION_ID: ${AZURE_SUBSCRIPTION_ID:-'NOT_SET'}"
          echo "   ACR_LOGIN_SERVER: ${ACR_LOGIN_SERVER:-'NOT_SET'}"
          
          # Validate deployment readiness (same logic as deployment workflow)
          ERRORS=0
          if [ -z "$AZURE_TENANT_ID" ]; then
            echo "‚ùå AZURE_TENANT_ID not configured for environment: $TARGET_ENV"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ -z "$AZURE_CLIENT_ID" ]; then
            echo "‚ùå AZURE_CLIENT_ID not configured for environment: $TARGET_ENV"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ -z "$AZURE_SUBSCRIPTION_ID" ]; then
            echo "‚ùå AZURE_SUBSCRIPTION_ID not configured for environment: $TARGET_ENV"
            ERRORS=$((ERRORS + 1))
          fi
          
          if [ -z "$ACR_LOGIN_SERVER" ]; then
            echo "‚ùå ACR_LOGIN_SERVER not configured for environment: $TARGET_ENV"
            ERRORS=$((ERRORS + 1))
          fi
          
          echo ""
          if [ $ERRORS -eq 0 ]; then
            echo "‚úÖ DEPLOYMENT SIMULATION SUCCESS!"
            echo "   üéØ All environment secrets properly configured"
            echo "   üöÄ Deployment workflow will use environment-specific credentials"
            echo "   üîí Environment isolation working correctly"
            echo ""
            echo "üìã Deployment Configuration Summary:"
            echo "   Target Environment: $TARGET_ENV"
            echo "   Azure Tenant: ${AZURE_TENANT_ID:0:8}..."
            echo "   Azure Client: ${AZURE_CLIENT_ID:0:8}..."
            echo "   Azure Subscription: ${AZURE_SUBSCRIPTION_ID:0:8}..."
            echo "   Container Registry: $ACR_LOGIN_SERVER"
          else
            echo "‚ùå DEPLOYMENT SIMULATION FAILED!"
            echo "   $ERRORS environment secrets missing"
            echo "   üîß Configure missing secrets before attempting deployment"
            echo ""
            echo "üìã Required secrets for environment '$TARGET_ENV':"
            echo "   - AZURE_TENANT_ID: Azure AD tenant ID"
            echo "   - AZURE_CLIENT_ID: Service Principal client ID"
            echo "   - AZURE_SUBSCRIPTION_ID: Azure subscription ID"
            echo "   - ACR_LOGIN_SERVER: Container registry endpoint"
            exit 1
          fi

  test-secrets-integration:
    runs-on: ubuntu-latest
    if: inputs.test_all_environments != true && inputs.test_environment != ''
    needs: [test-repository-secrets, test-single-environment]
    environment: ${{ inputs.test_environment }}
    steps:
      - name: Test Repository and Environment Secrets Integration
        run: |
          echo "üîÑ Testing integration of repository and environment secrets..."
          echo "==========================================================="
          echo ""
          echo "Environment: ${{ inputs.test_environment }}"
          echo ""
          
          echo "üìã Repository Secrets (Common across all environments):"
          echo "   SonarQube URL: ${{ secrets.SONAR_HOST_URL }}"
          echo "   SonarQube Token: [CONFIGURED]"
          echo "   Checkmarx URL: ${{ secrets.CHECKMARX_URL }}"
          echo "   Checkmarx Client ID: [CONFIGURED]"
          echo "   Checkmarx Client Secret: [CONFIGURED]"
          echo ""
          
          echo "üìã Environment Secrets (Specific to ${{ inputs.test_environment }}):"
          echo "   Azure Tenant ID: ${{ secrets.AZURE_TENANT_ID }}"
          echo "   Azure Client ID: ${{ secrets.AZURE_CLIENT_ID }}"
          echo "   Azure Subscription: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          echo "   ACR Server: ${{ secrets.ACR_LOGIN_SERVER }}"
          echo ""
          
          echo "‚úÖ Secrets integration test completed successfully!"
          echo "üéØ Ready for deployment workflow execution"

  generate-secrets-summary:
    runs-on: ubuntu-latest
    if: inputs.test_all_environments == true
    needs: [test-repository-secrets, test-all-environments]
    steps:
      - name: Generate Comprehensive Secrets Summary
        run: |
          echo "üìä ENVIRONMENT SECRETS VALIDATION SUMMARY"
          echo "========================================"
          echo ""
          echo "üéØ Test Results:"
          echo "   Test Type: All Environments"
          echo "   Timestamp: $(date -u)"
          echo "   Triggered By: ${{ github.actor }}"
          echo ""
          echo "üìã Results Summary:"
          
          # Check results from previous jobs
          if [ "${{ needs.test-repository-secrets.result }}" = "success" ]; then
            echo "   ‚úÖ Repository Secrets: All configured"
          else
            echo "   ‚ùå Repository Secrets: Issues found"
          fi
          
          if [ "${{ needs.test-all-environments.result }}" = "success" ]; then
            echo "   ‚úÖ Environment Secrets: All environments configured"
            echo ""
            echo "üöÄ DEPLOYMENT READY:"
            echo "   - All common secrets (SonarQube, Checkmarx) configured"
            echo "   - All environment-specific secrets (Azure, ACR) configured"
            echo "   - Dynamic secrets selection working correctly"
            echo "   - Environment isolation properly implemented"
            echo ""
            echo "üìã Secrets Architecture:"
            echo "   üåê Repository Level: SonarQube, Checkmarx (shared)"
            echo "   üåç Environment Level: Azure, ACR (isolated)"
            echo "   üîí Security: Environment-based access controls"
          else
            echo "   ‚ùå Environment Secrets: Some environments have issues"
            echo ""
            echo "üîß NEXT STEPS:"
            echo "   1. Check individual environment job results above"
            echo "   2. Configure missing secrets in GitHub Environment settings"
            echo "   3. Re-run this test workflow to validate fixes"
            echo ""
            echo "üìã Required Environment Secrets (same names, different values):"
            echo "   - AZURE_TENANT_ID"
            echo "   - AZURE_CLIENT_ID"
            echo "   - AZURE_SUBSCRIPTION_ID"
            echo "   - ACR_LOGIN_SERVER"
            echo ""
            echo "üìã Required Repository Secrets (same values for all environments):"
            echo "   - SONAR_TOKEN"
            echo "   - SONAR_HOST_URL"
            echo "   - CHECKMARX_CLIENT_ID"
            echo "   - CHECKMARX_CLIENT_SECRET"
            echo "   - CHECKMARX_URL"
          fi