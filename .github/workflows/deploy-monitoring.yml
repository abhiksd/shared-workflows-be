name: Deploy AKS Monitoring Stack

on:
  workflow_call:
    inputs:
      environment:
        description: 'Target environment (dev, staging, production)'
        required: true
        type: string
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
        type: string
      aks_resource_group:
        description: 'AKS resource group name'
        required: true
        type: string
      azure_subscription_id:
        description: 'Azure subscription ID'
        required: true
        type: string
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        type: boolean
        default: false
    secrets:
      AZURE_CLIENT_ID:
        description: 'Azure Client ID for OIDC authentication'
        required: true
      AZURE_TENANT_ID:
        description: 'Azure Tenant ID'
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: 'Azure Subscription ID'
        required: true

  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
        type: string
      aks_resource_group:
        description: 'AKS resource group name'
        required: true
        type: string
      force_deploy:
        description: 'Force deployment'
        required: false
        type: boolean
        default: false

env:
  HELM_VERSION: '3.13.0'
  KUBECTL_VERSION: '1.28.0'

permissions:
  id-token: write
  contents: read

jobs:
  prepare-monitoring:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check-changes.outputs.should-deploy }}
      monitoring-changed: ${{ steps.check-changes.outputs.monitoring-changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for monitoring changes
        id: check-changes
        run: |
          if [[ "${{ inputs.force_deploy }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "monitoring-changed=true" >> $GITHUB_OUTPUT
            echo "Force deployment requested"
            exit 0
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -E "^helm/monitoring/|^\.github/workflows/deploy-monitoring\.yml$"; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "monitoring-changed=true" >> $GITHUB_OUTPUT
            echo "Monitoring configuration changed"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "monitoring-changed=false" >> $GITHUB_OUTPUT
            echo "No monitoring changes detected"
          fi

  deploy-monitoring:
    needs: prepare-monitoring
    runs-on: ubuntu-latest
    if: needs.prepare-monitoring.outputs.should-deploy == 'true'
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure CLI Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ inputs.azure_subscription_id || secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: ${{ env.KUBECTL_VERSION }}

      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ inputs.aks_resource_group }} \
            --name ${{ inputs.aks_cluster_name }} \
            --overwrite-existing

      - name: Create monitoring namespace
        run: |
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
          kubectl label namespace monitoring name=monitoring --overwrite

      - name: Add Helm repositories
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Deploy Prometheus Stack
        run: |
          helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --values helm/monitoring/values.yaml \
            --values helm/monitoring/values-${{ inputs.environment }}.yaml \
            --set global.environment=${{ inputs.environment }} \
            --set global.clusterName=${{ inputs.aks_cluster_name }} \
            --set global.azureSubscriptionId=${{ inputs.azure_subscription_id || secrets.AZURE_SUBSCRIPTION_ID }} \
            --set global.azureResourceGroup=${{ inputs.aks_resource_group }} \
            --set kube-prometheus-stack.prometheus.enabled=true \
            --set kube-prometheus-stack.alertmanager.enabled=true \
            --set kube-prometheus-stack.grafana.enabled=false \
            --wait \
            --timeout=600s

      - name: Deploy Grafana
        run: |
          helm upgrade --install grafana grafana/grafana \
            --namespace monitoring \
            --values helm/monitoring/values.yaml \
            --values helm/monitoring/values-${{ inputs.environment }}.yaml \
            --set global.environment=${{ inputs.environment }} \
            --set global.clusterName=${{ inputs.aks_cluster_name }} \
            --wait \
            --timeout=300s

      - name: Deploy Loki Stack
        run: |
          helm upgrade --install loki grafana/loki-stack \
            --namespace monitoring \
            --values helm/monitoring/values.yaml \
            --values helm/monitoring/values-${{ inputs.environment }}.yaml \
            --set global.environment=${{ inputs.environment }} \
            --set global.clusterName=${{ inputs.aks_cluster_name }} \
            --wait \
            --timeout=300s

      - name: Deploy Custom Monitoring Resources
        run: |
          helm upgrade --install aks-monitoring ./helm/monitoring \
            --namespace monitoring \
            --values helm/monitoring/values-${{ inputs.environment }}.yaml \
            --set global.environment=${{ inputs.environment }} \
            --set global.clusterName=${{ inputs.aks_cluster_name }} \
            --set global.azureSubscriptionId=${{ inputs.azure_subscription_id || secrets.AZURE_SUBSCRIPTION_ID }} \
            --set global.azureResourceGroup=${{ inputs.aks_resource_group }} \
            --wait \
            --timeout=300s

      - name: Verify monitoring deployment
        run: |
          echo "Checking Prometheus deployment..."
          kubectl get pods -n monitoring -l app.kubernetes.io/name=prometheus
          
          echo "Checking Grafana deployment..."
          kubectl get pods -n monitoring -l app.kubernetes.io/name=grafana
          
          echo "Checking Loki deployment..."
          kubectl get pods -n monitoring -l app.kubernetes.io/name=loki
          
          echo "Checking AlertManager deployment..."
          kubectl get pods -n monitoring -l app.kubernetes.io/name=alertmanager
          
          echo "Waiting for all monitoring pods to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/component=prometheus -n monitoring --timeout=300s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=300s

      - name: Get Grafana access information
        run: |
          echo "=== Grafana Access Information ==="
          
          if [[ "${{ inputs.environment }}" == "dev" ]]; then
            NODE_PORT=$(kubectl get svc grafana -n monitoring -o jsonpath='{.spec.ports[0].nodePort}')
            NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
            echo "Grafana URL: http://$NODE_IP:$NODE_PORT"
          else
            EXTERNAL_IP=$(kubectl get svc grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            echo "Grafana URL: http://$EXTERNAL_IP"
          fi
          
          echo "Default admin username: admin"
          echo "Admin password: $(kubectl get secret grafana -n monitoring -o jsonpath='{.data.admin-password}' | base64 -d)"

      - name: Get Prometheus access information
        run: |
          echo "=== Prometheus Access Information ==="
          kubectl port-forward -n monitoring svc/kube-prometheus-stack-prometheus 9090:9090 &
          sleep 5
          echo "Prometheus accessible via port-forward on: http://localhost:9090"
          pkill kubectl || true

      - name: Configure Azure Monitor Integration
        if: inputs.environment == 'production'
        run: |
          echo "Setting up Azure Monitor Container Insights..."
          
          # Enable Container Insights on the AKS cluster
          az aks enable-addons \
            --resource-group ${{ inputs.aks_resource_group }} \
            --name ${{ inputs.aks_cluster_name }} \
            --addons monitoring

      - name: Test alerting rules
        run: |
          echo "Validating Prometheus rules..."
          kubectl exec -n monitoring deployment/kube-prometheus-stack-prometheus -- \
            promtool check rules /etc/prometheus/rules/prometheus-aks-monitoring-alerts-rulefiles-0/*.yaml

  post-deployment:
    needs: [prepare-monitoring, deploy-monitoring]
    runs-on: ubuntu-latest
    if: needs.deploy-monitoring.result == 'success'
    
    steps:
      - name: Deployment Summary
        run: |
          echo "=== AKS Monitoring Deployment Summary ==="
          echo "Environment: ${{ inputs.environment }}"
          echo "AKS Cluster: ${{ inputs.aks_cluster_name }}"
          echo "Resource Group: ${{ inputs.aks_resource_group }}"
          echo ""
          echo "Deployed Components:"
          echo "✅ Prometheus (Metrics collection and alerting)"
          echo "✅ Grafana (Visualization and dashboards)"
          echo "✅ Loki (Log aggregation)"
          echo "✅ AlertManager (Alert routing and notification)"
          echo "✅ ServiceMonitors (Application monitoring)"
          echo "✅ PrometheusRules (Custom alerting rules)"
          echo ""
          echo "Next Steps:"
          echo "1. Access Grafana dashboard to view metrics"
          echo "2. Configure alert notification channels in AlertManager"
          echo "3. Import additional dashboards as needed"
          echo "4. Configure log forwarding to Loki"

      - name: Create deployment artifact
        run: |
          echo "Monitoring deployment completed successfully for ${{ inputs.environment }}" > monitoring-deployment-${{ inputs.environment }}.log
          echo "Timestamp: $(date)" >> monitoring-deployment-${{ inputs.environment }}.log
          echo "Cluster: ${{ inputs.aks_cluster_name }}" >> monitoring-deployment-${{ inputs.environment }}.log

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-deployment-${{ inputs.environment }}
          path: monitoring-deployment-${{ inputs.environment }}.log
          retention-days: 30