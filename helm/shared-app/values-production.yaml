# Production environment configuration
global:
  environment: production
  applicationName: shared-app
  applicationType: java-springboot

# Image configuration
image:
  repository: ""
  tag: ""
  pullPolicy: IfNotPresent

imagePullSecrets:
  - name: acr-secret

# Replica configuration
replicaCount: 3

# Deployment strategy
deploymentStrategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0

# Resource configuration
resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 1000m
    memory: 2Gi

# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

# Service configuration
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  domain: example.com
  tls:
    enabled: true
    secretName: tls-cert
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

# Service Account
serviceAccount:
  create: true
  annotations:
    azure.workload.identity/client-id: ""

# Security Context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  capabilities:
    drop:
    - ALL

# Health checks
livenessProbe:
  enabled: true
  httpGet:
    path: /actuator/health/liveness
    port: http
    scheme: HTTP
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: /actuator/health/readiness
    port: http
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: true
  httpGet:
    path: /actuator/health
    port: http
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30
  successThreshold: 1

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Network Policy
networkPolicy:
  enabled: true
  ingress:
    ingressNamespace: ingress-nginx
  egress:
    enabled: true

# Metrics and monitoring
metrics:
  enabled: true
  port: 9090
  service:
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    namespace: monitoring
    labels:
      release: prometheus

# Database configuration
database:
  enabled: true
  type: postgresql
  host: postgres.database.svc.cluster.local
  port: 5432
  name: app_production
  username: app_user

# Redis configuration
redis:
  enabled: true
  host: redis.redis.svc.cluster.local
  port: 6379

# ConfigMap
configMap:
  enabled: true
  data:
    application.properties: |
      server.port=8080
      management.endpoints.web.exposure.include=health,info,metrics,prometheus
      management.endpoint.health.probes.enabled=true
      management.health.readinessState.enabled=true
      management.health.livenessState.enabled=true
      logging.level.root=INFO
      logging.level.com.example=INFO
      spring.datasource.hikari.maximum-pool-size=20
      spring.datasource.hikari.minimum-idle=5
      spring.datasource.hikari.connection-timeout=30000
      spring.datasource.hikari.validation-timeout=5000
      spring.redis.timeout=2000ms
      spring.redis.lettuce.pool.max-active=20
      spring.redis.lettuce.pool.max-idle=8

# Environment variables
env:
  - name: JAVA_OPTS
    value: "-Xmx2g -Xms1g -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
  - name: SPRING_PROFILES_ACTIVE
    value: "production"
  - name: TZ
    value: "UTC"

# Volume mounts for temporary directories
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: var-cache
    mountPath: /var/cache

volumes:
  - name: tmp
    emptyDir: {}
  - name: var-cache
    emptyDir: {}

# Node affinity and anti-affinity
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - shared-app
        - key: app.kubernetes.io/instance
          operator: In
          values:
          - shared-app
      topologyKey: kubernetes.io/hostname
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/arch
          operator: In
          values:
          - amd64
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      preference:
        matchExpressions:
        - key: node.kubernetes.io/instance-type
          operator: In
          values:
          - Standard_D4s_v3
          - Standard_D8s_v3

# Topology spread constraints
topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: shared-app
        app.kubernetes.io/instance: shared-app

# Tolerations for dedicated nodes
tolerations: []

# Node selector
nodeSelector: {}

# Priority class
priorityClassName: high-priority

# Grace period for pod termination
terminationGracePeriodSeconds: 60

# Lifecycle hooks
lifecycle:
  preStop:
    exec:
      command:
        - /bin/sh
        - -c
        - sleep 30

# Pod annotations
podAnnotations:
  cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"
  prometheus.io/path: "/actuator/prometheus"

# Pod labels
podLabels:
  version: "v1.0.0"

# Common annotations for all resources
commonAnnotations:
  app.kubernetes.io/environment: production
  app.kubernetes.io/owner: platform-team

# Common labels for all resources
commonLabels:
  tier: backend
  criticality: high