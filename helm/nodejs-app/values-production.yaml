# Production Environment Values for Node.js Application

global:
  environment: production

# High availability with multiple replicas
replicaCount: 3

image:
  pullPolicy: IfNotPresent

# Environment variables
env:
  - name: ENVIRONMENT
    value: "production"
  - name: APPLICATION_NAME
    value: "nodejs-app"
  - name: NODE_ENV
    value: "production"
  - name: PORT
    value: "3000"

# ConfigMap for production
configMap:
  enabled: true
  data:
    LOG_LEVEL: "warn"
    DEBUG: "false"
    NODE_OPTIONS: "--max-old-space-size=2048"

# Production resource limits
resources:
  limits:
    cpu: 1000m
    memory: 2Gi
  requests:
    cpu: 500m
    memory: 1Gi

# Strict health checks for production
livenessProbe:
  enabled: true
  httpGet:
    path: /health
    port: 3000
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 10
  failureThreshold: 3

readinessProbe:
  enabled: true
  httpGet:
    path: /ready
    port: 3000
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Production ingress configuration
ingress:
  enabled: true
  pathPrefix: "nodejs-app"
  proxyBodySize: "1024m"
  hosts:
    - host: nodejs-app.company.com

# Production autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Monitoring enabled
monitoring:
  enabled: true
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"

# Pod disruption budget for high availability
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Network policies enabled for security
networkPolicy:
  enabled: true

# Anti-affinity for better distribution across nodes
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - nodejs-app
        topologyKey: kubernetes.io/hostname

# Production security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 2000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Service account
serviceAccount:
  create: true
  annotations:
    # Add any production-specific annotations

# Tolerations for dedicated nodes if needed
tolerations: []

# Node selector for production nodes
nodeSelector:
  environment: production