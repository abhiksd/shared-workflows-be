# Development Environment Profile
spring:
  profiles:
    active: dev
  
  # PostgreSQL Database Configuration
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:javaapp_dev}
    username: ${DB_USERNAME:javaapp_user}
    password: ${DB_PASSWORD:dev_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
  
  # JPA Configuration
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        jdbc:
          time_zone: UTC
        default_schema: public
  
  # Redis Configuration
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 5000ms
    database: 0
    lettuce:
      pool:
        max-active: 10
        max-idle: 10
        min-idle: 1
        max-wait: -1ms
  
  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 300000  # 5 minutes
      cache-null-values: false
  
  # Security Configuration
  security:
    oauth2:
      client:
        registration:
          azure:
            client-id: ${AZURE_CLIENT_ID:dev-client-id}
            client-secret: ${AZURE_CLIENT_SECRET:dev-client-secret}
            scope: openid,profile,email
            redirect-uri: ${APP_BASE_URL:http://localhost:8080}/login/oauth2/code/azure
        provider:
          azure:
            authorization-uri: https://login.microsoftonline.com/${AZURE_TENANT_ID:common}/oauth2/v2.0/authorize
            token-uri: https://login.microsoftonline.com/${AZURE_TENANT_ID:common}/oauth2/v2.0/token
            user-info-uri: https://graph.microsoft.com/v1.0/me
            user-name-attribute: name

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api
  error:
    include-stacktrace: on_param
    include-message: always

# Logging Configuration
logging:
  level:
    com.example.javaapp: INFO
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.springframework.cache: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/java-app-dev.log
    max-size: 100MB
    max-history: 30

# Management & Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,env,prometheus,loggers,beans,configprops
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5,0.9,0.95,0.99
    tags:
      application: java-app
      environment: dev

# Application Configuration
app:
  name: Java App
  version: ${APP_VERSION:1.0.0}
  environment: dev
  
  # CORS Configuration
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080,https://dev-frontend.example.com}
    allowed-methods: "GET,POST,PUT,DELETE,OPTIONS,PATCH"
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600
  
  # JWT Configuration
  jwt:
    secret: ${JWT_SECRET:dev-jwt-secret-key-change-in-production}
    expiration: ${JWT_EXPIRATION:43200000}  # 12 hours
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}  # 7 days
  
  # Rate Limiting
  rate-limit:
    enabled: true
    requests-per-minute: 100
    
  # File Upload
  upload:
    max-file-size: 10MB
    max-request-size: 50MB
    temp-dir: ${TEMP_DIR:/tmp/uploads}


    
# Development Features
debug:
  enabled: true
  sql-queries: true
  cache-operations: true